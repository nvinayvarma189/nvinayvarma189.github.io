<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Vinay Varma</title>
    <subtitle>Vinay Varma&#x27;s personal website</subtitle>
    <link href="https://vinay.lol/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://vinay.lol"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2025-08-09T00:00:00+00:00</updated>
    <id>https://vinay.lol/atom.xml</id>
    <entry xml:lang="en">
        <title>Using OS file descriptors to transfer data between processes</title>
        <published>2025-08-09T00:00:00+00:00</published>
        <updated>2025-08-09T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://vinay.lol/til/file-descriptors/" type="text/html"/>
        <id>https://vinay.lol/til/file-descriptors/</id>
        
        <content type="html">&lt;p&gt;I was trying to read some data from a python process that I spawned inside Typescript. Initially I was trying to read the data in real time from the python print statements. Whatever I printed in my python script was being read as JSON and being parsed to understand what it is.&lt;&#x2F;p&gt;
&lt;p&gt;example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# script.py
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;json
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;progress_data = {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;progress&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;x out of y files are done&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(json.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;dumps&lt;&#x2F;span&gt;&lt;span&gt;(progress_data))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;values_data = {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;values&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: [ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;4.&lt;&#x2F;span&gt;&lt;span&gt;..]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(json.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;dumps&lt;&#x2F;span&gt;&lt;span&gt;(progress_data))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I would call the python script inside the typescript process like this&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;pythonProcess &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;executablePath&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        [
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;--threshold&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;similarityThreshold&lt;&#x2F;span&gt;&lt;span&gt;.toString(),
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;--db-path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;dbPath&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        ],
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;          cwd: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;dirname&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;executablePath&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; fd0=stdin, fd1=stdout, fd2=stderr
&lt;&#x2F;span&gt;&lt;span&gt;          stdio: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;pipe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;pipe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;pipe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;      );
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;One problem I had was I would add some print statements for debugging purpose and leave them there, which would later break my flow in TS side.&lt;&#x2F;p&gt;
&lt;p&gt;But we can just write to a specific file descriptior index and not have different data mix up into one std channel&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;log_progress&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;current&lt;&#x2F;span&gt;&lt;span&gt;: int, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;total&lt;&#x2F;span&gt;&lt;span&gt;: int, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;current_file&lt;&#x2F;span&gt;&lt;span&gt;: str | None = None) -&amp;gt; None:
&lt;&#x2F;span&gt;&lt;span&gt;    progress_data = {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;current&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: current,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;total&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: total,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;currentFile&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: current_file,
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        payload = (json.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;dumps&lt;&#x2F;span&gt;&lt;span&gt;(progress_data) + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;encode&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;utf-8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        os.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, payload) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# notice the file descriptor number 4
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;except &lt;&#x2F;span&gt;&lt;span&gt;Exception &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;e:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Progress pipe write failed: &lt;&#x2F;span&gt;&lt;span&gt;{e}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span&gt;=sys.stderr)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span&gt;os.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;fdopen&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;result_pipe:
&lt;&#x2F;span&gt;&lt;span&gt;        result_pipe.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;(json.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;dumps&lt;&#x2F;span&gt;&lt;span&gt;(result_converted))
&lt;&#x2F;span&gt;&lt;span&gt;        result_pipe.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;flush&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;except &lt;&#x2F;span&gt;&lt;span&gt;Exception &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;e:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Result pipe write failed: &lt;&#x2F;span&gt;&lt;span&gt;{e}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span&gt;=sys.stderr)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and read them in ts like this&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;pythonProcess &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;spawn&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;executablePath&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        [
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;--threshold&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;similarityThreshold&lt;&#x2F;span&gt;&lt;span&gt;.toString(),
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;--db-path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;dbPath&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        ],
&lt;&#x2F;span&gt;&lt;span&gt;        {
&lt;&#x2F;span&gt;&lt;span&gt;          cwd: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;dirname&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;executablePath&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; fd0=stdin, fd1=stdout, fd2=stderr, fd3=result JSON, fd4=progress JSON
&lt;&#x2F;span&gt;&lt;span&gt;          stdio: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;pipe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;pipe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;pipe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;pipe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;pipe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;      );
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;errorOutput &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;faceData&lt;&#x2F;span&gt;&lt;span&gt;: any = null;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; Dedicated buffers
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;progressBuffer &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;resultBuffer &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; Read progress JSON lines from fd 4
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;progressStream &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;pythonProcess&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;stdio&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;NodeJS&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;ReadableStream &lt;&#x2F;span&gt;&lt;span&gt;| null;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;progressStream&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;progressStream&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;setEncoding&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;utf8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;progressStream&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;chunk&lt;&#x2F;span&gt;&lt;span&gt;: string) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;progressBuffer &lt;&#x2F;span&gt;&lt;span&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;chunk&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;lineEnd &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;progressBuffer&lt;&#x2F;span&gt;&lt;span&gt;.indexOf(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;lineEnd &lt;&#x2F;span&gt;&lt;span&gt;!== -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;line &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;progressBuffer&lt;&#x2F;span&gt;&lt;span&gt;.substring(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;lineEnd&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;progressBuffer &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;progressBuffer&lt;&#x2F;span&gt;&lt;span&gt;.substring(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;lineEnd &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;line&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;progressData &lt;&#x2F;span&gt;&lt;span&gt;= JSON.parse(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;line&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;              } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;catch &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span&gt;.error(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Error parsing progress JSON:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;              }
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;lineEnd &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;progressBuffer&lt;&#x2F;span&gt;&lt;span&gt;.indexOf(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;          }
&lt;&#x2F;span&gt;&lt;span&gt;        });
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&#x2F;&#x2F; Read result JSON from fd 3
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;resultStream &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;pythonProcess&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;stdio&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;NodeJS&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;ReadableStream &lt;&#x2F;span&gt;&lt;span&gt;| null;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;resultStream&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;resultStream&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;setEncoding&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;utf8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;resultStream&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;chunk&lt;&#x2F;span&gt;&lt;span&gt;: string) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;resultBuffer &lt;&#x2F;span&gt;&lt;span&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;chunk&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        });
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;resultStream&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, () &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;resultBuffer&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;faceData &lt;&#x2F;span&gt;&lt;span&gt;= JSON.parse(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;resultBuffer&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;catch &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;              &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span&gt;.error(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Failed to parse result JSON:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;          }
&lt;&#x2F;span&gt;&lt;span&gt;        });
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;what-is-fd-3-and-why-four-entries-in-stdio&quot;&gt;What is fd 3 and why four entries in stdio?&lt;&#x2F;h1&gt;
&lt;p&gt;In Unix-like processes, file descriptors map as:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;fd 0 = stdin&lt;&#x2F;li&gt;
&lt;li&gt;fd 1 = stdout&lt;&#x2F;li&gt;
&lt;li&gt;fd 2 = stderr&lt;&#x2F;li&gt;
&lt;li&gt;fd 3, 4, … = extra descriptors you explicitly provide&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;In Node’s spawn, stdio lets you define what the child gets:
[&#x27;pipe&#x27;, &#x27;pipe&#x27;, &#x27;pipe&#x27;] gives the child stdin&#x2F;stdout&#x2F;stderr as pipes you can read&#x2F;write via child.stdio[0..2].
Adding more entries like [&#x27;pipe&#x27;, &#x27;pipe&#x27;, &#x27;pipe&#x27;, &#x27;pipe&#x27;] creates an extra pipe, exposed to the child as fd 3, and to the parent as child.stdio[3].
In Python, you can open and write to that extra pipe with os.fdopen(3, &#x27;w&#x27;). That’s how we deliver the final JSON without touching stdout.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Use of typing.cast in python</title>
        <published>2025-07-01T00:00:00+00:00</published>
        <updated>2025-07-01T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://vinay.lol/til/typing-cast-in-python/" type="text/html"/>
        <id>https://vinay.lol/til/typing-cast-in-python/</id>
        
        <content type="html">&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;typing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;List, Union, cast
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;a : List[Union[int, None]] = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, None]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;b: List[int]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;b = [i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;a] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# lint error
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;b = [i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;i is not None] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# no lint error
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Sometimes the static type checker is not able to infer the type of the variable. In such cases, you can use &lt;code&gt;typing.cast&lt;&#x2F;code&gt; to cast the type of the variable. Static checkers don’t narrow types for arbitrary indexed expressions.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;data_dfs: Dict[str, Dict[str, Union[None, pd.Series]]] = {}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;data_dfs[entity_id][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;capital&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] = None
&lt;&#x2F;span&gt;&lt;span&gt;data_dfs[entity_id][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;ratio&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] = None
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# lint error is there. Even when we are filtering out the None values even though at runtime, this will not cause any issues.
&lt;&#x2F;span&gt;&lt;span&gt;sums: List[pd.Series] = [
&lt;&#x2F;span&gt;&lt;span&gt;        data_dfs[entity_id][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;entity_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;data_dfs
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;data_dfs[entity_id][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;sums&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] is not None
&lt;&#x2F;span&gt;&lt;span&gt;    ]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# You can explicitly cast the type to the expected type to make sure 
&lt;&#x2F;span&gt;&lt;span&gt;sums: List[pd.Series] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;cast&lt;&#x2F;span&gt;&lt;span&gt;(List[pd.Series], [
&lt;&#x2F;span&gt;&lt;span&gt;        data_dfs[entity_id][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;entity_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;data_dfs
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;data_dfs[entity_id][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;sums&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] is not None
&lt;&#x2F;span&gt;&lt;span&gt;    ])
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;but the onus is on us to make sure that this is not being used excessivley for convinience. It is an act of fooling ourselves if we do that.&lt;&#x2F;p&gt;
&lt;p&gt;from the first example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;b = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;cast&lt;&#x2F;span&gt;&lt;span&gt;(List[int], b) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# no lint error. but values og b can be None during runtime.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Use of db.merge in SQLAlchemy</title>
        <published>2025-06-03T00:00:00+00:00</published>
        <updated>2025-06-03T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://vinay.lol/til/db-merge-sqlalchemy/" type="text/html"/>
        <id>https://vinay.lol/til/db-merge-sqlalchemy/</id>
        
        <content type="html">&lt;p&gt;I had something like this&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# crud.py
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;update_org_vaults_metadata&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;: Session, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;org&lt;&#x2F;span&gt;&lt;span&gt;: models.Organization, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;vaults&lt;&#x2F;span&gt;&lt;span&gt;: List[Dict]):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;org.metadata is None:
&lt;&#x2F;span&gt;&lt;span&gt;        org.metadata = {}
&lt;&#x2F;span&gt;&lt;span&gt;    org.metadata[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;vaults&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] = vaults
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;flag_modified&lt;&#x2F;span&gt;&lt;span&gt;(org, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    db.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;commit&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and in another file, I had something like this&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;copy
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;src.database.db &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;db_context
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;src.database &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;crud
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;db_context&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;db:
&lt;&#x2F;span&gt;&lt;span&gt;    org = crud.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;get_organization_by_id&lt;&#x2F;span&gt;&lt;span&gt;(db, org_id)
&lt;&#x2F;span&gt;&lt;span&gt;    vaults = org.metadata[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;vaults&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;vaults = copy.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;deepcopy&lt;&#x2F;span&gt;&lt;span&gt;(vaults)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;vault &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;vaults:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# modify vaults
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;pass
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;db_context&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;db:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# Update the metadata within the same database session
&lt;&#x2F;span&gt;&lt;span&gt;    crud.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;update_org_vaults_metadata&lt;&#x2F;span&gt;&lt;span&gt;(db, org, vaults)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now I would expect that, since &lt;code&gt;vaults&lt;&#x2F;code&gt; is a fresh copy of &lt;code&gt;org.metadata[&amp;quot;vaults&amp;quot;]&lt;&#x2F;code&gt;, the &lt;code&gt;crud.update_org_vaults_metadata(db, org, vaults)&lt;&#x2F;code&gt; would modify the metadata of the org in the db with the newly modified vaults folder.&lt;&#x2F;p&gt;
&lt;p&gt;but this doesn&#x27;t happen because in the second db session, I&#x27;m passing org  that was defined in first db session. If we use org  anywhere outside the first session, the org  object becomes &amp;quot;detached&amp;quot;. Since we are passing a detached object in a new db session, the modifications are being done to the db.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Solutions:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Re-fetch the org in the second session as well.&lt;&#x2F;li&gt;
&lt;li&gt;use db.merge &lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;db_context&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;db:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# Reattach the org object to the new session
&lt;&#x2F;span&gt;&lt;span&gt;    org = db.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;merge&lt;&#x2F;span&gt;&lt;span&gt;(org)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# Update the metadata within the same database session
&lt;&#x2F;span&gt;&lt;span&gt;    crud.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;update_org_vaults_metadata&lt;&#x2F;span&gt;&lt;span&gt;(db, org, vaults)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Use of db.refresh in SQLAlchemy</title>
        <published>2024-10-30T00:00:00+00:00</published>
        <updated>2024-10-30T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://vinay.lol/til/db-refresh-sqlalchemy/" type="text/html"/>
        <id>https://vinay.lol/til/db-refresh-sqlalchemy/</id>
        
        <content type="html">&lt;p&gt;Uses of db.refresh(obj):&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Reloads the object&#x27;s attributes from the database.&lt;&#x2F;li&gt;
&lt;li&gt;Updates any database-generated values (like timestamps, auto-incremented IDs)&lt;&#x2F;li&gt;
&lt;li&gt;Resets any expired attributes to their current database values&lt;&#x2F;li&gt;
&lt;li&gt;Ensures the object in memory matches what&#x27;s actually in the database&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;So It makes sense to be used after a db.commit()&lt;&#x2F;p&gt;
&lt;p&gt;commit() ends the current transaction and writes changes to the database so the database might have modified some values during commit (triggers, defaults, etc.) &lt;&#x2F;p&gt;
&lt;p&gt;Problems without refresh&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# Example of potential issues
&lt;&#x2F;span&gt;&lt;span&gt;config = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;BankConfiguration&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;db.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(config)
&lt;&#x2F;span&gt;&lt;span&gt;db.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;commit&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# Without refresh:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(config.created_at)  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# Might be None if it&amp;#39;s a database-generated timestamp
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(config.id)         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# Might be None if it&amp;#39;s an auto-generated ID
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# Another example
&lt;&#x2F;span&gt;&lt;span&gt;config.name = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;new name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;db.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;commit&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# If database has triggers or rules that modify other fields
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(config.last_modified)  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# Might show old value without refresh
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Cherry-picking commits in Git</title>
        <published>2024-09-09T00:00:00+00:00</published>
        <updated>2024-09-09T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://vinay.lol/til/cherry-picking-git/" type="text/html"/>
        <id>https://vinay.lol/til/cherry-picking-git/</id>
        
        <content type="html">&lt;p&gt;I did cherry-pick commits many times before. But I kept forgetting how simple it is.&lt;&#x2F;p&gt;
&lt;p&gt;Cherry picking is fairly simple. it works just like git merge but with individual commits. Let&#x27;s say staging is ahead of main by 5 commits. Now if you want to apply only those changes from latest two commits, you can checkout to main and run &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; cherry-pick &amp;lt;first-commit-hash-on-staging&amp;gt; &amp;lt;second-commit-hash-on-staging&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That&#x27;s it, you now have the changes only from these 2 commits applied to your main with the same commit metadata. Instead of directly pushing to main, You can create a new branch from this by gco -b &amp;quot;cherry-picked-brach&amp;quot;  and then git push origin &amp;quot;cherry-picked-brach&amp;quot;  and then create a PR on GH.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Frames</title>
        <published>2024-08-24T00:00:00+00:00</published>
        <updated>2024-08-24T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://vinay.lol/posts/frames/" type="text/html"/>
        <id>https://vinay.lol/posts/frames/</id>
        
        <content type="html">&lt;p&gt;Last Updated: 18th Oct 2025&lt;&#x2F;p&gt;
&lt;p&gt;Each of these frames make me feel something I struggle to put into words. Each one a different feeling. I&#x27;ve decided to document as it helps in crystallization and reinforcement of thoughts&#x2F;emotions (which, I believe, is key to developing taste). Hence this is also a practice of self-awareness.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;The Goodbye&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;frames&#x2F;life-of-pi-frame.png&quot; alt=&quot;Life of Pi Goodbye&quot; &#x2F;&gt; &lt;a href=&quot;https:&#x2F;&#x2F;www.imdb.com&#x2F;title&#x2F;tt0454876&#x2F;&quot;&gt;creds&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This is from a scene in Life of Pi where Pi is meeting Anandi for the last time. I&#x27;ve looked at this frame long enough to derive a (perhaps non-existent) meaning. There are two main elements at play here: the anxiety-inducing unrest of the sea (emoted by pi in the preceding frame) and the reassuring solidity of the bridge (emoted by Anandi in this frame) supporting the depiction of both uncertainty and hope in a single moment.&lt;&#x2F;p&gt;
&lt;p&gt;Photographically, the placement of the actors in the center left to not conceal the convergence of the bridge is great! The colors, the contrast, and the natural light falling from the right adds to the scene.&lt;&#x2F;p&gt;
&lt;p&gt;All of this stitched together, I think, produces the intended feeling of a sinking heart.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Dust Storm&lt;&#x2F;strong&gt;

&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;vinay.lol&amp;#x2F;processed_images&amp;#x2F;ladies-huddle.5dfbd68b84fe50cb.jpg&quot; &#x2F;&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;There lies a grand, horror fantasy, tragedy, revenge, flavored movie somewhere in this image. I like how the pots are completely back and none of the faces can be seen. It adds a mystic vibe to it. If ever I write a book or direct a movie, I want to do one with exactly this vibe.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.artsy.net&#x2F;artwork&#x2F;steve-mccurry-dust-storm-vertical-2&quot;&gt;creds&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Little Cattle in Bhutan&lt;&#x2F;strong&gt;
&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;frames&#x2F;little-cattle-in-bhutan.jpg&quot; alt=&quot;Little Cattle in Bhutan&quot; &#x2F;&gt; &lt;a href=&quot;https:&#x2F;&#x2F;www.instagram.com&#x2F;p&#x2F;Bqlp_XggVGf&#x2F;&quot;&gt;creds&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This picture always sparks a wonder in me and makes me think what would life look like if I was one of those kids. How would that innocence look on me? What are their biggest dreams and what are they afraid of the most? Do they think life is short or long?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Surfing Sunset&lt;&#x2F;strong&gt;
&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;frames&#x2F;surfing-shore.jpg&quot; alt=&quot;Surfing Sunset&quot; &#x2F;&gt; &lt;a href=&quot;https:&#x2F;&#x2F;www.instagram.com&#x2F;p&#x2F;C2Nv-dGueFr&#x2F;&quot;&gt;creds&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;It takes me back to this one time I was in Mulki learning to surf in the morning and was swimming in the backwaters in the evening. There was a time when the craving to adopt a lifestyle of adventure sport as my early morning activity had a strong hold on me. It still does. But I can sense that its power has greatly reduced. It happens when you don&#x27;t act on such cravings right away and leave it for time (as a concept) to devour.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Only way is ahead&lt;&#x2F;strong&gt;
&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;frames&#x2F;only-way-is-ahead.jpg&quot; alt=&quot;Only way is ahead&quot; &#x2F;&gt; &lt;a href=&quot;https:&#x2F;&#x2F;www.instagram.com&#x2F;p&#x2F;C2AR7UCofr7&#x2F;&quot;&gt;creds&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Makes me think of a small town boy, burdened&#x2F;awarded with responsibilities early in life. He is just 20 and has the confidence that everything is figured out for him. The long road on his back is filled with small happinesses for himself and large sacrifices he made for his loved ones.&lt;&#x2F;p&gt;
&lt;p&gt;Absolutely love the monotone on this one.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Catapult into the Gold&lt;&#x2F;strong&gt;
&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;frames&#x2F;catapult-into-the-gold.jpg&quot; alt=&quot;Catapult into the Gold&quot; &#x2F;&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;www.instagram.com&#x2F;p&#x2F;C2chFcIugOm&#x2F;&quot;&gt;creds&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;What a breathtaking shot this is! Every time I see this, I can&#x27;t help but imagine myself as him and looking down while plunging into the massive ocean. This also evokes a major part of the same emotion from the 3rd picture. I guess I really like being in the water. Ironic thing to say who can&#x27;t swim to save his life. But I don&#x27;t let it dampen my imagination self of being a water baby.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Python interpreter stores unassigned results to &#x27;_&#x27;</title>
        <published>2024-06-05T00:00:00+00:00</published>
        <updated>2024-06-05T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://vinay.lol/til/python-interpreter-unassigned-results/" type="text/html"/>
        <id>https://vinay.lol/til/python-interpreter-unassigned-results/</id>
        
        <content type="html">&lt;p&gt;I have the habit of using the python interpreter to do some quick experiments. Sometimes I do rather ambitious things, this one time I was running an expensive operation ~20 mins and I was supposed to deploy that in the next few mins.&lt;&#x2F;p&gt;
&lt;p&gt;I was in a hurry and just executed the code (a function with a loop) and forgot to assign it to some variable so that I can write the results to a file.&lt;&#x2F;p&gt;
&lt;p&gt;That&#x27;s when this knowledge came in handy. I simply assigned the value of &lt;code&gt;_&lt;&#x2F;code&gt; to a variable and wrote it to a file.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;expensive_func&lt;&#x2F;span&gt;&lt;span&gt;(a):
&lt;&#x2F;span&gt;&lt;span&gt;...     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;a
&lt;&#x2F;span&gt;&lt;span&gt;...     
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;expensive_func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;_
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Update arbitrary number of attributes for multiple rows in Postgres with SQLAlchemy</title>
        <published>2024-05-29T00:00:00+00:00</published>
        <updated>2024-05-29T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://vinay.lol/til/update-multiple-attrs-for-multiple-rows/" type="text/html"/>
        <id>https://vinay.lol/til/update-multiple-attrs-for-multiple-rows/</id>
        
        <content type="html">&lt;p&gt;I had a need to update an arbitary number of attributes for each row in a table. And I had a lot of rows to update. I was using SQLAlchemy to do this. I found this to be a bit tricky and thought I should document it here.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;bulk_update_rows&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;: Session, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;model&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;update_items&lt;&#x2F;span&gt;&lt;span&gt;: List[Dict[str, Any]]):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Bulk update rows in a table based on a list of conditions and attributes
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;    Args:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;        db (Session): SQLAlchemy Session
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;        model (_type_): The SQLAlchemy model to update
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;        update_items (List[Dict[str, Any]]): The list of dictionaries containing the conditions and attributes to update
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;        Example: [
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;                    {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;                        &amp;quot;id&amp;quot;: 1,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;                        &amp;quot;attributes&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;                            &amp;quot;name&amp;quot;: &amp;quot;new name 1&amp;quot;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;                            &amp;quot;description&amp;quot;: &amp;quot;new description 1&amp;quot;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;                            &amp;quot;price&amp;quot;: 100.0,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;                            &amp;quot;quantity&amp;quot;: 10
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;                        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;                    },
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;                    {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;                        &amp;quot;secondary_id&amp;quot;: 4,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;                        &amp;quot;attributes&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;                            &amp;quot;name&amp;quot;: &amp;quot;new name 4&amp;quot;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;                            &amp;quot;description&amp;quot;: &amp;quot;new description 4&amp;quot;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;                            &amp;quot;price&amp;quot;: 300.0,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;                            &amp;quot;quantity&amp;quot;: 30
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;                        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;                    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;                ]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;            This will update the attributes of the rows with id=1 and secondary_id=4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    case_dict = {}
&lt;&#x2F;span&gt;&lt;span&gt;    conditions = {}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;update_items:
&lt;&#x2F;span&gt;&lt;span&gt;        attributes = item[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;attributes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;        condition_key = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;(key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;item &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;key != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;attributes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        condition_value = item[condition_key]
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;attr, value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;attributes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;attr not in case_dict:
&lt;&#x2F;span&gt;&lt;span&gt;                case_dict[attr] = []
&lt;&#x2F;span&gt;&lt;span&gt;            case_dict[attr].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;getattr&lt;&#x2F;span&gt;&lt;span&gt;(model, condition_key) == condition_value, value))
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;condition_key not in conditions:
&lt;&#x2F;span&gt;&lt;span&gt;            conditions[condition_key] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        conditions[condition_key].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(condition_value)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    update_values = {
&lt;&#x2F;span&gt;&lt;span&gt;        attr: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt;(*[(cond, val) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;cond, val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;cases], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;else_&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;getattr&lt;&#x2F;span&gt;&lt;span&gt;(model, attr))
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;attr, cases &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;case_dict.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;not update_values:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    combined_conditions = []
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;condition_key, condition_values &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;conditions.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;        combined_conditions.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;getattr&lt;&#x2F;span&gt;&lt;span&gt;(model, condition_key).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;in_&lt;&#x2F;span&gt;&lt;span&gt;(condition_values))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    stmt = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span&gt;(model).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        *combined_conditions
&lt;&#x2F;span&gt;&lt;span&gt;    ).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;values&lt;&#x2F;span&gt;&lt;span&gt;(update_values)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    db.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(stmt)
&lt;&#x2F;span&gt;&lt;span&gt;    db.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;commit&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>What I Like</title>
        <published>2024-04-20T00:00:00+00:00</published>
        <updated>2024-04-20T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://vinay.lol/posts/what-i-like/" type="text/html"/>
        <id>https://vinay.lol/posts/what-i-like/</id>
        
        <content type="html">&lt;p&gt;Last Updated: 20th Apr 2024&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A hot water bath on a cold winter evening. long and elaborate.&lt;&#x2F;li&gt;
&lt;li&gt;When I finally understand a concept with enough nuance to deduce it from the hook line instead of needing to memorise it.&lt;&#x2F;li&gt;
&lt;li&gt;Listening to a song that has great lyrical meaning. I like looping a song and studying the role of each word in conveying layered emotions. Always blows my mind.
&lt;ul&gt;
&lt;li&gt;I have a &lt;a href=&quot;https:&#x2F;&#x2F;open.spotify.com&#x2F;playlist&#x2F;2fJVGXwOl14ZXJtP7B1mBb?si=64e43cf381bf4b27&quot;&gt;playlist&lt;&#x2F;a&gt; of songs like this.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;A non-hasty moment of lying on the bed to stretch out my arms and legs, taking in a deep breath, and then releasing the lock as I exhale.&lt;&#x2F;li&gt;
&lt;li&gt;Head and neck massages. Best when mom&#x2F;dad is doing it while we talk about the nothings of our lives.&lt;&#x2F;li&gt;
&lt;li&gt;When I turn out to be useful to someone who I look up to and respect.&lt;&#x2F;li&gt;
&lt;li&gt;A surprise day off.&lt;&#x2F;li&gt;
&lt;li&gt;An uninterrupted time window to explore whatever natural compulsion I&#x27;m having without the sense of a deadline or an expectation of the outcome.&lt;&#x2F;li&gt;
&lt;li&gt;Both, giving and receiving compliments.&lt;&#x2F;li&gt;
&lt;li&gt;The warmth of close physical proximity (shoulder touching, hand locking, arms wrapping, gentle grip on the thighs) with my friends and family.&lt;&#x2F;li&gt;
&lt;li&gt;A breezy evening at the beach just watching the waves crash and recede.&lt;&#x2F;li&gt;
&lt;li&gt;The aftermath of making a clever, cheeky, punny joke that tickles or surprises everyone.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There are obviously more things I like, and I hope to document more as I experience them.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>When I Killed A Cockroach</title>
        <published>2024-02-18T00:00:00+00:00</published>
        <updated>2024-02-18T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://vinay.lol/posts/when-i-killed-a-cockroach/" type="text/html"/>
        <id>https://vinay.lol/posts/when-i-killed-a-cockroach/</id>
        
        <content type="html">&lt;p&gt;3:14 AM on a cold September night.&lt;&#x2F;p&gt;
&lt;p&gt;I dropped to my knees and reached under the bed for the bottle. Shaking it made no sound and I made my sluggish walk into the kitchen for a refill. The kitchen was a small space lit with a murky source of light from outside. Bright enough for me to find the water can. Dim enough for me to stub my toe against the water can.&lt;&#x2F;p&gt;
&lt;p&gt;Resisting the wail of pain, I watched gravity do its toxic job of pulling stuff down, filling up my bottle. A zippy movement in the periphery of my vision drew my attention. I tilt my neck to notice a peculiar black spot on the floor. What made it peculiar? The other black spots lacked a third dimension. This cannot be just another black spot. I frisked the wall in search of the switchboard and turned the lights on. There he was, a whole inch of a cockroach with whiskers as long as his body, in all glory.&lt;&#x2F;p&gt;
&lt;p&gt;I usually don’t get creeped out by insects unless they decide to flex their wings. I was alert to not let him dash away but he didn’t move a muscle. &lt;em&gt;Do cockroaches have muscles?&lt;&#x2F;em&gt; Anyway, perhaps he was hoping I hadn’t seen him. It’s a good idea not to make himself obvious and make me come after him. I had no intentions of violence though. I just wanted to escort him out in the most civil way possible.&lt;&#x2F;p&gt;
&lt;p&gt;I fixed my stare on him and took a few steps back to grab the broom. Contemplating my weapon of choice, I traced back my steps forward to close the distance between us. He was still holding onto the act of “You think, therefore I am”. I tried to pin him down taking advantage of my (relatively) massive arm reach but my terrible accuracy got the best of me. He wasn’t playing anymore. He revved up his motors and dashed in a frenzy to reach under the fridge, changing directions at the speed of the wind. I managed to block his path and stub him down. My internal dialogue read, “&lt;em&gt;Sir, you are under arrest&lt;&#x2F;em&gt;”.&lt;&#x2F;p&gt;
&lt;p&gt;I kept the broom pressed against the floor and dragged it alongside my steps towards the outdoor. A doubt sprang in me to check if he was still there under the broom. I couldn&#x27;t see him, I couldn&#x27;t feel him. I only have the absence of him as the evidence. I released the press to swipe him off outside, but he obviously had a trick rolled up in his sleeve. He jumped over the broom and ran towards my shoe rack to cloak himself. Panic set in as a sudden surge of rage, flared with annoyance, overtook me. I raised my broom and brought it down to land a thundering blow right on his spine. I think I just ended a life. I lifted the broom to find him plastered to the floor with twitching legs and the stamp mark of his fluids. I lifted him with a paper and flung him out like I couldn’t care less.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Post-violence remorse was settling in. Was that really necessary? Couldn’t I be more patient? How arrogant of me to kill another living being for its mere existence threatened my comfort? Is this what I’m making out of my fortune to be born a human? all the miraculous evolution over thousands of years for what? to be an absolute unkind cunt with no empathy? I’m a living being and so is he. Who told me that my life is more important? Imagine the plight of his family anticipating his return with food. Did he ever guess that he would die today? I feel so awful under my skin.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I did the walk of shame back into my room, lay on my bed and habitually picked up the phone. Before my own moral counselling produced more Impending resentment, I logged on to twitter and scrolled these overbearing thoughts away.&lt;&#x2F;p&gt;
&lt;p&gt;In the following couple of weeks, I killed 8 more.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Awesome Tech Blog Posts</title>
        <published>2023-12-10T00:00:00+00:00</published>
        <updated>2023-12-10T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://vinay.lol/posts/awesome-tech-blogs/" type="text/html"/>
        <id>https://vinay.lol/posts/awesome-tech-blogs/</id>
        
        <content type="html">&lt;style&gt;

    .svg-icon-container{
        min-height: 1rem;
        margin: 2px 2px 0px 0px;
    }

    .alert-box-container{
        display: flex;
        border-radius: 4px;
        min-height: 1rem;
        vertical-align: center;
        padding: 0.75rem 1rem 0.75rem 0.5rem;
        border-left-style: solid;
        border-left-width: 0.25rem;
    }

    #info-id{
        background-color: #EBF8FE;
        color: #2A6CB3
    }

    #warning-id{
        background-color: #FCF4F5;
        color: #D74937
    }

&lt;&#x2F;style&gt;


&lt;div&gt;



    


&lt;div class=&quot;alert-box-container&quot; id=info-id&gt;
    &lt;div class = &quot;svg-icon-container&quot;&gt;
        
            &lt;svg fill=&quot;currentColor&quot; width=&quot;24px&quot; height=&quot;24px&quot; viewBox=&quot;0 0 24 24&quot; xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M20 12C20 7.58172 16.4183 4 12 4C7.58172 4 4 7.58172 4 12C4 16.4183 7.58172 20 12 20C16.4183 20 20 16.4183 20 12ZM11 8C11 8.55228 11.4477 9 12 9C12.5523 9 13 8.55228 13 8C13 7.44772 12.5523 7 12 7C11.4477 7 11 7.44772 11 8ZM12 10C13 10 13 11 13 11V16C13 16 13 17 12 17C11 17 11 16 11 16V11C11 11 11 11 10.5 11C10 11 10 10 10 10H12Z&quot;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;
                
    &lt;&#x2F;div&gt;
    Last Updated: 10th Dec 2020
&lt;&#x2F;div&gt;

&lt;&#x2F;div&gt;
&lt;p&gt;I wanted to have a place to record all the amazing tech blog posts that I keep going back to. These are the kinds of posts that I have learned a lot from and I can&#x27;t make it bette even if I write it in my own words. If I can, one day, write a technical blog post that is as good as any of these, I will be so satisfied.&lt;&#x2F;p&gt;
&lt;p&gt;According to me, a good technical blog post is one that:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Answers the question &amp;quot;why should I care about this&amp;quot; before answering &amp;quot;how to do this&amp;quot;.&lt;&#x2F;li&gt;
&lt;li&gt;Starts with a simple case and builds on complexity.&lt;&#x2F;li&gt;
&lt;li&gt;Draws parallels with real life examples.&lt;&#x2F;li&gt;
&lt;li&gt;Assumes reader is a monkey with a mouse brain.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;All of the below posts have some or all of the above qualities:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;tomroth.com.au&#x2F;decorators&#x2F;&quot;&gt;Python Decorators&lt;&#x2F;a&gt; [July 18th, 2022]
&lt;ol&gt;
&lt;li&gt;Step by Step explanation of how decorators work with increasing complexity.&lt;&#x2F;li&gt;
&lt;li&gt;Good examples of situations where it is fit to use decorators. Before reading this post, I did not care about using them.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;encore.dev&#x2F;blog&#x2F;retries&quot;&gt;Retries - An interactive study of common retry methods&lt;&#x2F;a&gt; [Oct 18th, 2023]
&lt;ol&gt;
&lt;li&gt;Love the interactive nature of this post. I can imagine and admire the effort that went into making this post.&lt;&#x2F;li&gt;
&lt;li&gt;Love the color coding used throughout the post.&lt;&#x2F;li&gt;
&lt;li&gt;Posts like these make me wonder if I ever understood the basics properly.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;betterstack.com&#x2F;community&#x2F;guides&#x2F;logging&#x2F;loguru&#x2F;&quot;&gt;A Complete Guide to Logging in Python with Loguru&lt;&#x2F;a&gt; [Nov 29th, 2023]
&lt;ol&gt;
&lt;li&gt;You probably don&#x27;t need to read any other post on logging in python after reading this. Very begginer friendly.&lt;&#x2F;li&gt;
&lt;li&gt;Covers structured logging, which is a must if you have a microservice architecture.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Live reload of a webserver inside a docker container</title>
        <published>2023-12-05T00:00:00+00:00</published>
        <updated>2023-12-05T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://vinay.lol/til/live-reload-docker-container/" type="text/html"/>
        <id>https://vinay.lol/til/live-reload-docker-container/</id>
        
        <content type="html">&lt;p&gt;Environemnt setup errors are always annoying. They suck time better than mousquitoes suck blood. I had a clean environment inside a docker image. The docker file looked like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;docker&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-docker &quot;&gt;&lt;code class=&quot;language-docker&quot; data-lang=&quot;docker&quot;&gt;&lt;span&gt;FROM python:3.10
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# install necessary system level packages
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;WORKDIR &#x2F;my-server
&lt;&#x2F;span&gt;&lt;span&gt;COPY .&#x2F;requirements.txt &#x2F;my-server&#x2F;requirements.txt
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# install python depndencies
&lt;&#x2F;span&gt;&lt;span&gt;RUN pip install --no-cache-dir --upgrade -r &#x2F;my-server&#x2F;requirements.txt
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;COPY .&#x2F;src &#x2F;my-server&#x2F;src
&lt;&#x2F;span&gt;&lt;span&gt;COPY .&#x2F;tools &#x2F;my-server&#x2F;tools
&lt;&#x2F;span&gt;&lt;span&gt;COPY .&#x2F;application.py &#x2F;my-server&#x2F;application.py
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;EXPOSE 5000
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;CMD [&amp;quot;uvicorn&amp;quot;, &amp;quot;application:application&amp;quot;, &amp;quot;--host&amp;quot;, &amp;quot;0.0.0.0&amp;quot;, &amp;quot;--port&amp;quot;, &amp;quot;5000&amp;quot;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and a docker-compose file like this&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;3.7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;services&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;fastapi&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;my-server-fastapi
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;ports&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;5000:5000
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;container_name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;fastapi
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;environment&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;ENVIRONMENT=${ENVIRONMENT}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;worker&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;my-server-worker
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;bash tools&#x2F;run-worker.sh
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;container_name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;worker
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;environment&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;OPENAI_API_KEY=${OPENAI_API_KEY}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Since my local env was broken, whenever I had to make a test call, I did &lt;code&gt;docker-compose up --build&lt;&#x2F;code&gt;. While this was working, I had to stop and restart the docker containers for ever code change. I needed a way to enable live reload inside the docker containers but I did not want to modify the existing Dockerfle or the docker-compose.yaml file.&lt;&#x2F;p&gt;
&lt;p&gt;I thought attaching the code as a volume to the docker containers to override the code (copied inside at docker image build time) would solve the issue but it did not. The trick was to add &lt;code&gt;WATCHFILES_FORCE_POLLING=true&lt;&#x2F;code&gt; as a env variable. &lt;&#x2F;p&gt;
&lt;p&gt;I added a docker-compose.dev.yaml file like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;3.7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;services&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;fastapi&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;my-server-fastapi
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;ports&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;5000:5000
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;container_name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;fastapi-dev
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;working_dir&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;&#x2F;my-server
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;uvicorn application:application --host 0.0.0.0 --reload --port 5000 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# hostname had to be 0.0.0.0 for 5000 port to be exposed to the host machine.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;volumes&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;.&#x2F;src:&#x2F;my-server&#x2F;src
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;.&#x2F;tools:&#x2F;my-server&#x2F;tools
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;.&#x2F;application.py:&#x2F;my-server&#x2F;application.py
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;environment&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;WATCHFILES_FORCE_POLLING=true
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;ENVIRONMENT=${ENVIRONMENT}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and I spun up the server like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;docker-compose -f&lt;&#x2F;span&gt;&lt;span&gt; docker-compose.dev.yaml up&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt; --build
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This way I could enable live reload inside the docker containers (where I have a working environment) without making adjustments on the original Dockerfile and the docker-compose.yaml file on which deployments depend on.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;69460295&#x2F;how-to-enable-live-reload-in-a-dockerised-fastapi-application-using-docker-compo&#x2F;75387355#75387355&quot;&gt;Reference&lt;&#x2F;a&gt; about &lt;code&gt;WATCHFILES_FORCE_POLLING&lt;&#x2F;code&gt; env variable&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Python profiling</title>
        <published>2023-11-30T00:00:00+00:00</published>
        <updated>2023-11-30T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://vinay.lol/til/python-profiling/" type="text/html"/>
        <id>https://vinay.lol/til/python-profiling/</id>
        
        <content type="html">&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;line_profiler &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;LineProfiler
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;time
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;profiler = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;LineProfiler&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;profile&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;inner&lt;&#x2F;span&gt;&lt;span&gt;(*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;, **&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;kwargs&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        profiler.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;add_function&lt;&#x2F;span&gt;&lt;span&gt;(func)
&lt;&#x2F;span&gt;&lt;span&gt;        profiler.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;enable_by_count&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(*args, **kwargs)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;inner
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;profile
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;    b=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        b+=i
&lt;&#x2F;span&gt;&lt;span&gt;        time.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;b
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;profiler.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;print_stats&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;uncountable-engineering&#x2F;pythons-line-profiler-32df2b07b290&quot;&gt;Reference&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>TEXT vs JSON vs JSONB column data types in postgres</title>
        <published>2023-11-29T00:00:00+00:00</published>
        <updated>2023-11-29T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://vinay.lol/til/text-json-jsonb-postgres/" type="text/html"/>
        <id>https://vinay.lol/til/text-json-jsonb-postgres/</id>
        
        <content type="html">&lt;ol&gt;
&lt;li&gt;If you have a python dict you want to store:
&lt;ol&gt;
&lt;li&gt;TEXT is not ideal as you would have to json dump your dict and then to query based on attributes of the column you have to do something like &lt;code&gt;where data::jsonb -&amp;gt;&amp;gt; &#x27;attribute&#x27; = &#x27;value&#x27;&lt;&#x2F;code&gt;. You have to convert to json or jsonb while querying&#x2F;filtering. It is the fastest to insert though. May not be storage efficient as indendation of json dumps is also stored.&lt;&#x2F;li&gt;
&lt;li&gt;JSON column allows to save the dict as it is (with same key order, indentation spaces, etc). It is faster to insert as compared to JSONB but slower than TEXT (because it needs to check for json validity). However, it is not storage efficient as JSONB. It offers basic querying and filtering capability. No need to json dumps and json loads everytime.&lt;&#x2F;li&gt;
&lt;li&gt;JSONB is the best and should be the go to choice most of the time. It is storage efficient (removes indentation spaces for example). But it doesn’t guarantee order of the keys. It also allows for indexing based on the attributes of JSONB. The only disadvantage compared to JSON is it can be a little slow when inserting. If your input data isn’t too large, this is negligable.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;chat.openai.com&#x2F;share&#x2F;dff0f491-50db-4a17-9075-4849fa41b25d&quot;&gt;Reference&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>An Afternoon Nap</title>
        <published>2023-11-26T00:00:00+00:00</published>
        <updated>2023-11-26T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://vinay.lol/posts/afternoon-nap/" type="text/html"/>
        <id>https://vinay.lol/posts/afternoon-nap/</id>
        
        <content type="html">&lt;p&gt;I fling the gate open and fly up the stairs, three steps at a time. Steering right into the corridor that leads to the entrance of my home, I kick my shoes off and drop myself on the diwan in the hall. My skin is clothed in a layer of sweat with some beads rolling down the back of my hair, staining the pillows. A little bit of leniency is to be granted after you&#x27;ve played cricket all morning on a hot summer day, right? Well, Amma isn&#x27;t too forgiving. She hisses at me, pulls me up, and points to the bathroom. I get inside with a towel wrapped around my waist and dip the mug into the bucket to wet my head and feet first. Surely, the water running from the tap is tepid without any preparation. It was really that hot outside.&lt;&#x2F;p&gt;
&lt;p&gt;I wipe the steam off the mirror to unblur my face and style my hair. Walking out of the bathroom, my skin is still fuzzy with the refreshment of a long meticulous bath. I hop into a free-flowing cotton tee and shorts, and just at the mid-day hours, I&#x27;m called for lunch. The dining table is decorated with my favorite things to look at, smell, and devour. Pressure-cooked rice, chicken curry, daal with rasam by its side, and a bowl of chilled curd in the character of a smooth moon. What can I complain about in life?&lt;&#x2F;p&gt;
&lt;p&gt;The hour hand has just moved past 1, and the hustle and bustle in the neighborhood has died down. A dark overcast has settled in, dimming the hot sun. I enter the bedroom and push the windows open to welcome the crisp breeze that it had brought along.  On my right, I see the mattress tightly hugged by a freshly ironed bedsheet, no waves on it, one could mistake it for the surface of a serene pond deep inside the woods. I place my knee on top of the bed to climb on it and lay my body flat, allowing the bed to take an impression of my spine. I throw my hands above my head, arch my back hard, and point my toes to stretch my body vertically. The tension of the stretch has flattened my stomach and squeezed the tiredness out of my sore muscles. As I slowly release my body, my jaw is in the arrangement of a long yawn, my eyes are logged with a layer of moisture, and my belly rolled back into a few folds (an extra fold I just gained from lunch). Sliding my limbs across the bed, making snow angels, I let my back draw in the warmth of the bedsheet. It has begun to drizzle outside and the post-lunch late-afternoon drowsiness needed no invitation.&lt;&#x2F;p&gt;
&lt;p&gt;Sleep has always been elusive. I could never summon it when I wanted to. But today, in this moment, it feels so easy. It doesn&#x27;t feel like those times struggling with a drained brain and bone, rolling to the sides, walking up and down, wondering what&#x27;s wrong. It doesn&#x27;t feel like those times jarring up to unwelcome phone calls and guests. It doesn&#x27;t feel like those times worrying about overdue work and undone chores. Right now, there is only one thing to do. That. Is. To. Sleep.&lt;&#x2F;p&gt;
&lt;p&gt;I can sense my system steadily shutting down. As much as I want this drowsiness to consume me, I try to postpone its overbearing weight for just a few minutes. I want... zzzzzz... no, no, wait, I kick up with a hypnic jerk. Wait, I want to have a memory of this moment. This moment of how truly present I am. This moment of no obligations. I&#x27;ve had such a satisfying half of a day. Yes, I must write this down. Ok. I better do it now before I drift into slee... zzzzzz.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Retry, Wait, and Fallback</title>
        <published>2023-11-21T00:00:00+00:00</published>
        <updated>2023-11-21T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://vinay.lol/til/wait-rety-fallback/" type="text/html"/>
        <id>https://vinay.lol/til/wait-rety-fallback/</id>
        
        <content type="html">&lt;p&gt;When you are building a workflow with a set of steps, you generally would want to make sure that the workflow is reliable. For example, if you are running a workflow and one of the step fails due to a network error, you would want to retry it for a certain number of times with some delays between each retry. If the workflow step fails even after retrying it for a certain number of times, you would want to add a fallback option to a different API.&lt;&#x2F;p&gt;
&lt;p&gt;A good example of this can be demonstrated with using the OpenAI API. Let&#x27;s say you want to use the &lt;a href=&quot;https:&#x2F;&#x2F;platform.openai.com&#x2F;docs&#x2F;api-reference&#x2F;introduction&quot;&gt;OpenAI API&lt;&#x2F;a&gt; to generate a completion to your user&#x27;s input. You would normally do it like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;openai &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;OpenAI
&lt;&#x2F;span&gt;&lt;span&gt;client = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;OpenAI&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;get_openai_response&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;user_input&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    input = {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;model&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;gpt-3.5-turbo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;messages&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: [
&lt;&#x2F;span&gt;&lt;span&gt;            {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;role&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;You are a helpful assistant.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;            {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;role&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;{user_input}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;        ]
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    response = client.chat.completions.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;create&lt;&#x2F;span&gt;&lt;span&gt;(**input)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;response
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;response = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;get_openai_response&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;tell me a joke&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(response[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;choices&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, &lt;code&gt;get_openai_response&lt;&#x2F;code&gt; can fail due to a number of reasons. You can run into a APITimeoutError, APIConnectionError, PermissionDeniedError, etc. Full list &lt;a href=&quot;https:&#x2F;&#x2F;platform.openai.com&#x2F;docs&#x2F;guides&#x2F;error-codes&#x2F;python-library-error-types&quot;&gt;here&lt;&#x2F;a&gt;. Errors like PermissionDeniedError or BadRequestError are not recoverable without any changes, But if you run into a APITimeoutError, RateLimitError, etc you can retry the request after a certain delay which usually solves the issue (especially true for OAI API as they experience a lot of heavy load).&lt;&#x2F;p&gt;
&lt;p&gt;In Python, you can do this via an excellent library called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jd&#x2F;tenacity&quot;&gt;tenacity&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;log_retry&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;retry_state&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;retry_state.outcome.failed:
&lt;&#x2F;span&gt;&lt;span&gt;        exception = retry_state.outcome.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;exception&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        func_name = retry_state.fn.__name__
&lt;&#x2F;span&gt;&lt;span&gt;        wait_time = retry_state.next_action.sleep
&lt;&#x2F;span&gt;&lt;span&gt;        logger.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;info&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;An exception of type: &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;(exception)}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt; has ocurred. Exception Message: &lt;&#x2F;span&gt;&lt;span&gt;{exception}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;. Will retry &lt;&#x2F;span&gt;&lt;span&gt;{func_name}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt; after &lt;&#x2F;span&gt;&lt;span&gt;{wait_time}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt; seconds.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;retry&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;stop&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;stop_after_attempt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# the function will be retried upto 4 more times after the first failure
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;wait&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;wait_exponential&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;multiplier&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;60&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;600&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# the delay between each retry will increase exponentially with a max of 10 minutes. Sequence is 60, 120, 240, 480, 600 seconds
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;retry&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;retry_if_exception_type&lt;&#x2F;span&gt;&lt;span&gt;(OpenAIError), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# trigger a retry for all kinds of openAI errors
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;before_sleep&lt;&#x2F;span&gt;&lt;span&gt;=log_retry, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# execute the log_retry function before each retry
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;reraise&lt;&#x2F;span&gt;&lt;span&gt;=True &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# reraise the original exception if the function fails even after all the retries. If this is set to False, you will get a RetryError exception that tenacity provides
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;get_openai_response&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;user_input&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# a = 1&#x2F;0 # this will not trigger a retry as we are only trigger it for exceptions that fall under OpenAIError
&lt;&#x2F;span&gt;&lt;span&gt;    input = {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;model&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;gpt-3.5-turbo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;messages&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: [
&lt;&#x2F;span&gt;&lt;span&gt;            {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;role&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;You are a helpful assistant.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;            {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;role&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;{user_input}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;        ]
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    response = client.chat.completions.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;create&lt;&#x2F;span&gt;&lt;span&gt;(**input)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;response
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The values of &lt;code&gt;wait_exponential&lt;&#x2F;code&gt; are just an example. You can tweak them according to your needs. Usually, wait_fixed should be good enough for most cases. But if the API you are calling is expected to be under huge load, you might want to use &lt;code&gt;wait_exponential&lt;&#x2F;code&gt; to avoid hitting the API too frequently. Please also take into account of how long can your workflow run.&lt;&#x2F;p&gt;
&lt;p&gt;Now, let&#x27;s say you want to add a fallback option to your workflow. You can do it like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;llm_call&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;user_input&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        response = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;get_openai_response&lt;&#x2F;span&gt;&lt;span&gt;(user_input)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;response[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;choices&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;][&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;except &lt;&#x2F;span&gt;&lt;span&gt;Exvception &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;e:
&lt;&#x2F;span&gt;&lt;span&gt;        logger.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;error while calling OpenAI: &lt;&#x2F;span&gt;&lt;span&gt;{e}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# chnage the user_input which is compatible with the fallback API here
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            response = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;get_anthropic_response&lt;&#x2F;span&gt;&lt;span&gt;(user_input)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;response
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;except &lt;&#x2F;span&gt;&lt;span&gt;Exception &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;e:
&lt;&#x2F;span&gt;&lt;span&gt;            logger.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;error while calling anthropic: &lt;&#x2F;span&gt;&lt;span&gt;{e}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Sorry, I am not able to understand you right now. Please try again later.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Maintainable DevOps for AWS EC2</title>
        <published>2023-10-29T00:00:00+00:00</published>
        <updated>2023-10-29T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://vinay.lol/til/terraform-ansible-awsec2/" type="text/html"/>
        <id>https://vinay.lol/til/terraform-ansible-awsec2/</id>
        
        <content type="html">&lt;p&gt;Let&#x27;s say, you have a backend web server that you want to deploy. On AWS, there are offerings like EC2, AWS Beanstalk, AWS ECS, AWS EKS, AWS Fargate, AWS Lambda and AWS AppRunner.&lt;&#x2F;p&gt;
&lt;p&gt;Depending on your requirements, you can make trade-offs between maintenance overhead and the control you need over your deployments. You can learn more about it here. The below is one way to manage your deployments on AWS EC2 instances. This is especially useful when you are in the pre-MVP stage where you expect your app to receive a lot of changes but less traffic.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;requirements&quot;&gt;Requirements&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;Need to have a staging and a production environment. Ideally, separate EC2 instances for each.&lt;&#x2F;li&gt;
&lt;li&gt;Need to have a CI&#x2F;CD pipeline that can deploy to staging and production environments based on pushes&#x2F;merges to respective branches from the GitHub repo.&lt;&#x2F;li&gt;
&lt;li&gt;Need a way to manage secrets and other configuration variables.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;We will explore a set up with GitHub Actions, EC2 machines, Caddy, TerraForm, Ansible, and Docker.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;creating-the-ec2-instances&quot;&gt;Creating the EC2 instances&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;Use TerraForm to create the EC2 instances. The reason this is beneficial over manual creation of resources from the AWS console is that you can create more instances with the same configuration (network setting, security groups, elastic IPs). Another advantage is that you can manage the state of all the cloud resources from multiple environments in a single place. You can also easily bring down instances&#x2F;resources that you do not need.&lt;&#x2F;li&gt;
&lt;li&gt;Here is a list of things you might want to do with TerraForm:
&lt;ol&gt;
&lt;li&gt;Create two new workspaces called production and staging in addition to the default workspace. You should able to create resources in a staging or production environment by switching to the respective workspace.&lt;&#x2F;li&gt;
&lt;li&gt;Configure VPC, security groups, and elastic IPs in such a way that the staging and production instances are isolated from each other. TerraForm allows you to use the workspace name inside the configuration file (by which you can reuse the same configuration file for both staging and production environments)&lt;&#x2F;li&gt;
&lt;li&gt;Add an SSH public key of your&#x27;s (or some team members&#x27;) so that you can SSH into the EC2 instances once they are created.&lt;&#x2F;li&gt;
&lt;li&gt;Create an AWS role and attach the necessary policies to the role. Then assign the role to the EC2 instances so that you can use the AWS CLI within the EC2 instances without having to manage the AWS credentials. This way you can also keep all actions that can be performed from the EC2 instances in check.&lt;&#x2F;li&gt;
&lt;li&gt;Create an Elastic IP and assign it to the EC2 instances so that the IP address of the EC2 instances does not change when you stop and start the instances.&lt;&#x2F;li&gt;
&lt;li&gt;Create Route53 records for the EC2 instances and the services running inside them so that your other services can communicate with the EC2 instances via the domain names.&lt;&#x2F;li&gt;
&lt;li&gt;Finally, create an Ansible inventory file. This will be used by Ansible to run the playbooks on the EC2 instances. You can use the TerraForm output variables to populate the inventory file.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;At this point, you should be able to create the EC2 instances and other resources (security_group, aws_key_pair, aws_iam_instance_profile, aws_iam_role, aws_eip, aws_route53_record, local_file (for ansible inventory file)) with the following command:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;terraform&lt;&#x2F;span&gt;&lt;span&gt; workspace select production
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;terraform&lt;&#x2F;span&gt;&lt;span&gt; apply
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;terraform&lt;&#x2F;span&gt;&lt;span&gt; workspace select staging
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;terraform&lt;&#x2F;span&gt;&lt;span&gt; apply
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But these are just bare EC2 instances. You need to install the necessary software and configure them to run your app. This is where Ansible comes in. But Before that, let&#x27;s ensure that we have a build and test process in place for your app.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;set-up-ci-with-github-actions&quot;&gt;set up CI with GitHub Actions&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;In the GH repo of your codebase, write a workflow that will get triggered for every push&#x2F;merge to the staging and production branches.&lt;&#x2F;li&gt;
&lt;li&gt;It should build the docker images according to the Dockerfile or the Docker Compose file and push the built images to AWS ECR.&lt;&#x2F;li&gt;
&lt;li&gt;If an image is being built from the main branch, tag the image with &lt;code&gt;latest&lt;&#x2F;code&gt; tag. If an image is being built from the staging branch, tag the image with &lt;code&gt;staging-latest&lt;&#x2F;code&gt;. Basically, we need to differentiate between the images built from staging and production branches.&lt;&#x2F;li&gt;
&lt;li&gt;Once the newly built images are pushed to ECR, the EC2 instances should pull the images and run containers from them. There are two ways to do it, either you can SSH into the EC2 instances and run the necessary commands (as part of the GH workflow itself) or you can set up a GH runner inside the EC2 machines (install the GH runner software inside the EC2 machine and register it inside your GH repo) and . The latter is more secure (because, unlike the former, the GH workflow commands run on our own EC2 machine and no GitHub&#x27;s runner machines won&#x27;t have access to our AWS EC2 machines) and is the recommended way.&lt;&#x2F;li&gt;
&lt;li&gt;Following the latter option will look something like this:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre style=&quot;background-color:#151515;color:#e8e8d3;&quot;&gt;&lt;code&gt;&lt;span&gt;deploy-staging:
&lt;&#x2F;span&gt;&lt;span&gt;    runs-on: [self-hosted, staging]
&lt;&#x2F;span&gt;&lt;span&gt;    if: github.ref == &amp;#39;refs&#x2F;heads&#x2F;staging&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    steps:
&lt;&#x2F;span&gt;&lt;span&gt;      - name: pull image
&lt;&#x2F;span&gt;&lt;span&gt;        env:
&lt;&#x2F;span&gt;&lt;span&gt;          ECR_REGISTRY: ${{ needs.build-and-push.outputs.registry }}
&lt;&#x2F;span&gt;&lt;span&gt;          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
&lt;&#x2F;span&gt;&lt;span&gt;        run: |
&lt;&#x2F;span&gt;&lt;span&gt;          cd ~ &amp;amp;&amp;amp; docker pull $ECR_REGISTRY&#x2F;$ECR_REPOSITORY:${{ env.STAGING_LATEST_TAG }}
&lt;&#x2F;span&gt;&lt;span&gt;      - name: restart containers
&lt;&#x2F;span&gt;&lt;span&gt;        run: |
&lt;&#x2F;span&gt;&lt;span&gt;          cd ~ &amp;amp;&amp;amp; docker-compose down &amp;amp;&amp;amp; docker-compose up -d
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note: The run commands are executed inside the staging EC2 machine as we have installed GH runner software inside it and tagged the EC2 instance as staging.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;configuring-the-ec2-instances-with-ansible&quot;&gt;Configuring the EC2 instances with Ansible&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;Ansible Playbooks lets you automate the task of running basically any set of commands on the EC2 instances. You can use the Ansible inventory file created in the previous step to run the playbooks on the EC2 instances. &lt;&#x2F;li&gt;
&lt;li&gt;Here is a list of things you might want to do with Ansible Playbooks:
&lt;ol&gt;
&lt;li&gt;As a first step, ensure that the EC2 instances are up to date with the latest security patches. You can use the &lt;code&gt;apt&lt;&#x2F;code&gt; module to install the latest updates. If you are using a different OS, you can use the corresponding module (example: &lt;code&gt;yum&lt;&#x2F;code&gt; for AWS Linux 2023).&lt;&#x2F;li&gt;
&lt;li&gt;Install the necessary packages for the deployment of your software builds. This includes: docker, docker-compose, git, python3, pip3, nodejs, npm, etc.&lt;&#x2F;li&gt;
&lt;li&gt;Install a reverse proxy like nginx or Caddy. The configuration files of the reverse proxy, just like the production and staging  &lt;code&gt;.env&lt;&#x2F;code&gt; files necessary for your backend app should not be pushed to the GH repo containing the config files for TerraForm and Ansible Playbook.&lt;&#x2F;li&gt;
&lt;li&gt;Since you will most likely be using Docker, you can set up a cron service to clean up unused docker images and containers regularly.&lt;&#x2F;li&gt;
&lt;li&gt;Set up a GH runner inside the EC2 instances. This will be used to pull the docker images from AWS ECR and run them.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Now you should be able to configure the EC2 instances with the following command:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;AWS_ACCOUNT_ID&lt;&#x2F;span&gt;&lt;span&gt;=&amp;lt;account_id&amp;gt; AWS_REGION=&amp;lt;region&amp;gt; ansible-playbook &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;--private-key ~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.ssh&#x2F;id_ed25519&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt; -i&lt;&#x2F;span&gt;&lt;span&gt; ansible&#x2F;inventories&#x2F;production ansible&#x2F;production.yml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;AWS_ACCOUNT_ID&lt;&#x2F;span&gt;&lt;span&gt;=&amp;lt;account_id&amp;gt; AWS_REGION=&amp;lt;region&amp;gt; ansible-playbook &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;--private-key ~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.ssh&#x2F;id_ed25519&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt; -i&lt;&#x2F;span&gt;&lt;span&gt; ansible&#x2F;inventories&#x2F;staging ansible&#x2F;staging.yml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note: For you to run the ansible-playbook commands, you need to have your public keys added to the EC2 machines when they are getting created. You can do this by adding the public keys to the TerraForm configuration files. you also need to set up the AWS ENV variables.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;final-flow&quot;&gt;Final Flow&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;You set up the EC2 machines with TerraForm for the first time.&lt;&#x2F;li&gt;
&lt;li&gt;You execute the Ansible playbook commands to configure the EC2 machines. It may fail the first time if you don&#x27;t have any ECR images to pull and run (if that is the case, you can skip pulling the image as the playbook commands are only run for the first time).&lt;&#x2F;li&gt;
&lt;li&gt;You push some changes to the production or staging branch of your Application GH repo and see that an image is built and pushed to ECR. It will also be tagged appropriately.&lt;&#x2F;li&gt;
&lt;li&gt;The GH action workflow will trigger the GH Runner inside the EC2 machines pull the image from ECR and run the docker container.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;short-comings&quot;&gt;Short Comings&lt;&#x2F;h1&gt;
&lt;p&gt;While the above setup covers 95% of the requirements and needs we had, there are some shortcomings with this approach in terms of convenience and maintenance overhead. Here are some of them:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Since we won&#x27;t be storing the .env files and configurations for reverse proxies, updates to the EC2 machines will happen only when we run the Ansible playbooks from our developer machines. Full CI&#x2F;CD for the infra repo is not possible without any changes.&lt;&#x2F;li&gt;
&lt;li&gt;We need to maintain a slightly different docker-compose file inside the EC2 machines for the deployment to work seamlessly.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Testing in Python</title>
        <published>2023-07-04T00:00:00+00:00</published>
        <updated>2023-07-04T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://vinay.lol/til/python-testing/" type="text/html"/>
        <id>https://vinay.lol/til/python-testing/</id>
        
        <content type="html">&lt;p&gt;I&#x27;ve written this almost a year back. I decided to give an (almost) permanent home here. Since I wrote this mostly for myself, the structure of the blog is not great. However, I believe the content is quite useful for me.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;python-testing-in-visual-studio-code&quot;&gt;Python Testing in Visual Studio Code&lt;&#x2F;h1&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;marketplace.visualstudio.com&#x2F;items?itemName=ms-python.python&quot;&gt;Python extension&lt;&#x2F;a&gt; for VSCode (developed by Microsoft) makes it easier to navigate the testing process (especially when there a many). If you have the extension installed, you should be able to see a beaker icon on the side panel.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;til&#x2F;python-testing&#x2F;beaker-icon.png&quot; alt=&quot;The beaker icon&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Some advantages of using this capability over using &lt;code&gt;pytest&lt;&#x2F;code&gt; CLI are:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Running a specific test is easier&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;A tree view of all the test folders, test files, and test functions is displayed in the left panel. You can hover over each item to run (or) run&amp;amp;debug all the test cases that are lower in the hierarchy of the hovered item.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;til&#x2F;python-testing&#x2F;tree-view-tests.png&quot; alt=&quot;tree view of all the discovered tests&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;We can hover over &lt;code&gt;test_fn&lt;&#x2F;code&gt; and run that test alone with a button click instead of doing it with the &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;36539692&#x2F;10524266&quot;&gt;pytest CLI like this&lt;&#x2F;a&gt;. Since I struggle to remember the commands, button clicks are faster.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;You can also run a test from the opened file in VSCode itself. You will see a run icon on the left of each discovered test function&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;til&#x2F;python-testing&#x2F;run-icon-test.png&quot; alt=&quot;A test function with a run icon on the left&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;style&gt;

    .svg-icon-container{
        min-height: 1rem;
        margin: 2px 2px 0px 0px;
    }

    .alert-box-container{
        display: flex;
        border-radius: 4px;
        min-height: 1rem;
        vertical-align: center;
        padding: 0.75rem 1rem 0.75rem 0.5rem;
        border-left-style: solid;
        border-left-width: 0.25rem;
    }

    #info-id{
        background-color: #EBF8FE;
        color: #2A6CB3
    }

    #warning-id{
        background-color: #FCF4F5;
        color: #D74937
    }

&lt;&#x2F;style&gt;


&lt;div&gt;



    


&lt;div class=&quot;alert-box-container&quot; id=info-id&gt;
    &lt;div class = &quot;svg-icon-container&quot;&gt;
        
            &lt;svg fill=&quot;currentColor&quot; width=&quot;24px&quot; height=&quot;24px&quot; viewBox=&quot;0 0 24 24&quot; xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M20 12C20 7.58172 16.4183 4 12 4C7.58172 4 4 7.58172 4 12C4 16.4183 7.58172 20 12 20C16.4183 20 20 16.4183 20 12ZM11 8C11 8.55228 11.4477 9 12 9C12.5523 9 13 8.55228 13 8C13 7.44772 12.5523 7 12 7C11.4477 7 11 7.44772 11 8ZM12 10C13 10 13 11 13 11V16C13 16 13 17 12 17C11 17 11 16 11 16V11C11 11 11 11 10.5 11C10 11 10 10 10 10H12Z&quot;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;
                
    &lt;&#x2F;div&gt;
    There are buttons on the UI for the most frequent CLI commands. 
For example: Re-running failed test cases only
&lt;&#x2F;div&gt;

&lt;&#x2F;div&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;You can view the entire output of the testing log.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;You can switch to the “OUTPUT“ section of the integrated terminal and select “Python Test Log“ to view the entire output.
&lt;img src=&quot;&#x2F;images&#x2F;til&#x2F;python-testing&#x2F;pytest-log.png&quot; alt=&quot;Log of pytest&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;style&gt;

    .svg-icon-container{
        min-height: 1rem;
        margin: 2px 2px 0px 0px;
    }

    .alert-box-container{
        display: flex;
        border-radius: 4px;
        min-height: 1rem;
        vertical-align: center;
        padding: 0.75rem 1rem 0.75rem 0.5rem;
        border-left-style: solid;
        border-left-width: 0.25rem;
    }

    #info-id{
        background-color: #EBF8FE;
        color: #2A6CB3
    }

    #warning-id{
        background-color: #FCF4F5;
        color: #D74937
    }

&lt;&#x2F;style&gt;


&lt;div&gt;



    


&lt;div class=&quot;alert-box-container&quot; id=info-id&gt;
    &lt;div class = &quot;svg-icon-container&quot;&gt;
        
            &lt;svg fill=&quot;currentColor&quot; width=&quot;24px&quot; height=&quot;24px&quot; viewBox=&quot;0 0 24 24&quot; xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M20 12C20 7.58172 16.4183 4 12 4C7.58172 4 4 7.58172 4 12C4 16.4183 7.58172 20 12 20C16.4183 20 20 16.4183 20 12ZM11 8C11 8.55228 11.4477 9 12 9C12.5523 9 13 8.55228 13 8C13 7.44772 12.5523 7 12 7C11.4477 7 11 7.44772 11 8ZM12 10C13 10 13 11 13 11V16C13 16 13 17 12 17C11 17 11 16 11 16V11C11 11 11 11 10.5 11C10 11 10 10 10 10H12Z&quot;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;
                
    &lt;&#x2F;div&gt;
    TIL: The use of the “OUTPUT“ section on the integrated terminal of VSCode
We can view the output logs of all the extensions
&lt;&#x2F;div&gt;

&lt;&#x2F;div&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;til&#x2F;python-testing&#x2F;pytest-log-select-vscode.png&quot; alt=&quot;Select the log output you want to view&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;View and compare the Test History of a test case easily&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;If a particular test case has failed now, we can see the test result history in the gutter decorations that will be displayed for each failed test case&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;til&#x2F;python-testing&#x2F;test-failure-compare.png&quot; alt=&quot;a linear history of test results being displayed&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;&#x2F;strong&gt; You can learn more about Python testing in VSCode &lt;a href=&quot;https:&#x2F;&#x2F;code.visualstudio.com&#x2F;docs&#x2F;python&#x2F;testing&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;monkey-patching&quot;&gt;Monkey Patching&lt;&#x2F;h1&gt;
&lt;p&gt;We shall see how we can leverage monkey patching to test functions that are expected to spit out different values on each run.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;monkey-patching-fixture&quot;&gt;Monkey patching fixture&lt;&#x2F;h3&gt;
&lt;p&gt;Let’s say we have the following function&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;uuid
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;greet&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;greeting&lt;&#x2F;span&gt;&lt;span&gt;: str) -&amp;gt; str:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;greeting + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(uuid.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;uuid4&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let’s try to create a test for this function&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;uuid
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;test_greet&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;monkeypatch&lt;&#x2F;span&gt;&lt;span&gt;: MonkeyPatch):
&lt;&#x2F;span&gt;&lt;span&gt;    sample_uuid = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(uuid.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;uuid4&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    greeting = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Hello &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;assert &lt;&#x2F;span&gt;&lt;span&gt;greeting + sample_uuid == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;greet&lt;&#x2F;span&gt;&lt;span&gt;(greeting)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Such a test will not pass. You will get an error something like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;.&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;tests&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;test_basic&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;py&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;test_greet Failed&lt;&#x2F;span&gt;&lt;span&gt;: [undefined]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;AssertionError&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;assert &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Hello 2639f2...-87ef386cae27&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Hello a1436c...-d3b69af84d05&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Hello a1436ca0&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;cf34&lt;&#x2F;span&gt;&lt;span&gt;-47&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;c1&lt;&#x2F;span&gt;&lt;span&gt;-8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;aca&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;d3b69af84d05
&lt;&#x2F;span&gt;&lt;span&gt;  + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Hello&lt;&#x2F;span&gt;&lt;span&gt; 2639&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;f240&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;b792&lt;&#x2F;span&gt;&lt;span&gt;-45&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;b6&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;be49&lt;&#x2F;span&gt;&lt;span&gt;-87&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;ef386cae27
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;monkeypatch &lt;&#x2F;span&gt;&lt;span&gt;= &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;_pytest&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;monkeypatch&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;MonkeyPatch &lt;&#x2F;span&gt;&lt;span&gt;object &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;at &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;0x7faf98410730&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;test_greet&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;monkeypatch&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;MonkeyPatch&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;sample_uuid &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;uuid&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;uuid4&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;        # &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;monkeypatch&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;setattr&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;uuid&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;uuid4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;lambda&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;sample_uuid&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;greeting &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Hello &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;assert greeting &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;sample_uuid &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;greet&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;greeting&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;E       AssertionError&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;assert &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Hello 2639f2...-87ef386cae27&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Hello a1436c...-d3b69af84d05&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;E         &lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Hello a1436ca0&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;cf34&lt;&#x2F;span&gt;&lt;span&gt;-47&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;c1&lt;&#x2F;span&gt;&lt;span&gt;-8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;aca&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;d3b69af84d05
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;E         &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Hello&lt;&#x2F;span&gt;&lt;span&gt; 2639&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;f240&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;b792&lt;&#x2F;span&gt;&lt;span&gt;-45&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;b6&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;be49&lt;&#x2F;span&gt;&lt;span&gt;-87&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;ef386cae27
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;tests&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;test_basic&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;py&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;AssertionError
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is because the UUID generated in the &lt;code&gt;test_greet&lt;&#x2F;code&gt; function is &lt;code&gt;2639f240-b792-45b6-be49-87ef386cae27&lt;&#x2F;code&gt; whereas the UUID generated in the &lt;code&gt;greet&lt;&#x2F;code&gt; function is &lt;code&gt;a1436ca0-cf34-47c1-8aca-d3b69af84d05&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This is fair because that is how &lt;code&gt;uuid4()&lt;&#x2F;code&gt; works. Every time it is supposed to return us a unique string.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;So how can we test something that keeps changing every time it gets called?&lt;&#x2F;strong&gt;
This is exactly why &lt;a href=&quot;https:&#x2F;&#x2F;docs.pytest.org&#x2F;en&#x2F;6.2.x&#x2F;fixture.html&quot;&gt;pytest fixtures&lt;&#x2F;a&gt; are useful. We will now use the Monkey Patching fixture.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s modify the test function like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;pytest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;MonkeyPatch
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;uuid
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;test_greet&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;monkeypatch&lt;&#x2F;span&gt;&lt;span&gt;: MonkeyPatch):
&lt;&#x2F;span&gt;&lt;span&gt;    sample_uuid = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(uuid.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;uuid4&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    monkeypatch.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;setattr&lt;&#x2F;span&gt;&lt;span&gt;(uuid, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;uuid4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;lambda&lt;&#x2F;span&gt;&lt;span&gt;: sample_uuid)
&lt;&#x2F;span&gt;&lt;span&gt;    greeting = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Hello&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;assert &lt;&#x2F;span&gt;&lt;span&gt;greeting + sample_uuid == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;greet&lt;&#x2F;span&gt;&lt;span&gt;(greeting)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Here is what we did&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;We made the &lt;code&gt;test_greet&lt;&#x2F;code&gt; function accept a pytest fixture called monkey-patch.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Note: The argument has to be &lt;code&gt;monkeypatch&lt;&#x2F;code&gt; only. Any other variant or another word will not work.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;We modified the &lt;code&gt;uuid4&lt;&#x2F;code&gt; function with our own implementation.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;The original implementation of &lt;code&gt;uuid4()&lt;&#x2F;code&gt; is&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;uuid4&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Generate a random UUID.&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;UUID&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span&gt;=os.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;urandom&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;After the line &lt;code&gt;monkeypatch.setattr(uuid, &amp;quot;uuid4&amp;quot;, lambda: sample_uuid)&lt;&#x2F;code&gt; it will behave like this&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;uuid4&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;2639f240-b792-45b6-be49-87ef386cae27&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; # &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;the contents &lt;&#x2F;span&gt;&lt;span&gt;of &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;sample_uuid
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Let’s analyse point 2 a bit further&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;monkeypatch.setattr&lt;&#x2F;code&gt; is helping us replace the implementation of &lt;code&gt;uuid4()&lt;&#x2F;code&gt; function from the &lt;code&gt;uuid&lt;&#x2F;code&gt; module.&lt;&#x2F;li&gt;
&lt;li&gt;Now every time we call &lt;code&gt;uuid4()&lt;&#x2F;code&gt; , it will always give us &lt;code&gt;sample_uuid&lt;&#x2F;code&gt; (which we hardcoded to &amp;quot;2639f240-b792-45b6-be49-87ef386cae27&amp;quot;)&lt;&#x2F;li&gt;
&lt;li&gt;After the monkey patch is applied, when we call the &lt;code&gt;greet&lt;&#x2F;code&gt; function (in the assert statement of the &lt;code&gt;test_greet&lt;&#x2F;code&gt; function), we get &lt;code&gt;2639f240-b792-45b6-be49-87ef386cae27&lt;&#x2F;code&gt; from the modified &lt;code&gt;uuid4()&lt;&#x2F;code&gt; function&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;It is important to note that the effect of monkey patching wears off as soon as we exit the test function. That is to say if we call &lt;code&gt;uuid.uuid4()&lt;&#x2F;code&gt; in another test function, we should be expecting the original behavior of &lt;code&gt;uuid.uuid4()&lt;&#x2F;code&gt;to occur.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;test_greet&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;monkeypatch&lt;&#x2F;span&gt;&lt;span&gt;: MonkeyPatch):
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# no error because uuid4 is modified to return a mock value
&lt;&#x2F;span&gt;&lt;span&gt;    sample_uuid = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(uuid.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;uuid4&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    monkeypatch.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;setattr&lt;&#x2F;span&gt;&lt;span&gt;(uuid, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;uuid4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;lambda&lt;&#x2F;span&gt;&lt;span&gt;: sample_uuid)
&lt;&#x2F;span&gt;&lt;span&gt;    greeting = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Hello &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;assert &lt;&#x2F;span&gt;&lt;span&gt;greeting + sample_uuid == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;greet&lt;&#x2F;span&gt;&lt;span&gt;(greeting)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;test_greet2&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# error will occur becuse uuid4 is not modified in this test. 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# The affect of monkeypatch only applies to the test function 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# where the fixture is applied
&lt;&#x2F;span&gt;&lt;span&gt;    sample_uuid = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(uuid.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;uuid4&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    greeting = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Hi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;assert &lt;&#x2F;span&gt;&lt;span&gt;greeting + sample_uuid == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;greet&lt;&#x2F;span&gt;&lt;span&gt;(greeting)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;special-mention&quot;&gt;Special Mention&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;This approach can be used to test anything that keeps changing every time we run it. Examples: Functions that involve random integers and timestamps.&lt;&#x2F;li&gt;
&lt;li&gt;Monkey patching doesn’t work if a module has immutable objects or attributes. Example: datetime.datetime. We will have to &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;20503374&#x2F;10524266&quot;&gt;patch&lt;&#x2F;a&gt; the entire datetime.datetime class.&lt;&#x2F;li&gt;
&lt;li&gt;You can also use &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;28080767&#x2F;10524266&quot;&gt;freezegun to freeze datetime&lt;&#x2F;a&gt; values for testing purposes.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;monkey-patching-outside-testing&quot;&gt;Monkey Patching Outside Testing&lt;&#x2F;h3&gt;
&lt;p&gt;Monkey patching is not unique to testing. Not even unique to Python. &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;6647776&#x2F;10524266&quot;&gt;This&lt;&#x2F;a&gt; has the best explanation of what it is.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;One way we can use this in our day-to-day work is:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Let’s say, we are facing an issue with a function’s implementation coming from an external library.&lt;&#x2F;li&gt;
&lt;li&gt;Ideally, the owners of the library have to fix the bug in, write a new test case, wait for the build to pass, and release a new version. After that, we can upgrade the library&#x27;s version in our codebase.&lt;&#x2F;li&gt;
&lt;li&gt;However, sometimes, there is no time to die. In such exceptional cases, we can monkey-patch the problematic function with our implementation and then ship our code.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;things-to-be-careful-about-monkey-patching&quot;&gt;Things to be careful about Monkey Patching&lt;&#x2F;h3&gt;
&lt;p&gt;There are serious drawbacks to monkey-patching:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;If two modules attempt to monkey-patch the same method, one of them (whichever one runs last) &amp;quot;wins&amp;quot; and the other patch has no effect. (In some cases, if the &amp;quot;winning&amp;quot; monkey-patch takes care to call the original method, the other patch(es) may also work; but you must hope that the patches do not have contradictory intentions.)&lt;&#x2F;li&gt;
&lt;li&gt;It creates a discrepancy between the source code on the disk and the observed behavior. This can be very confusing when troubleshooting, especially for anyone other than the monkey-patch&#x27;s author. Monkey-patching is therefore a kind of antisocial behavior.&lt;&#x2F;li&gt;
&lt;li&gt;Monkey-patches can be a source of upgrade pain when the patch makes assumptions about the patched object which are no longer true.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20120730014107&#x2F;http:&#x2F;&#x2F;wiki.zope.org&#x2F;zope2&#x2F;MonkeyPatch&quot;&gt;This&lt;&#x2F;a&gt; is the source for the above points.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;test-performance-and-coverage&quot;&gt;Test Performance and Coverage&lt;&#x2F;h1&gt;
&lt;h3 id=&quot;coverage&quot;&gt;Coverage&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;pytest --cov&lt;&#x2F;span&gt;&lt;span&gt;=slu&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt; --cov-report&lt;&#x2F;span&gt;&lt;span&gt; html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt; --cov-report&lt;&#x2F;span&gt;&lt;span&gt; term:skip-covered tests&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The above statement gives us a coverage report. For each file, we can see the test report below:           &lt;img src=&quot;&#x2F;images&#x2F;til&#x2F;python-testing&#x2F;sample-test-coverage.png&quot; alt=&quot;Sample test coverage report&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The green lines signify that the tests have touched these lines. It is important to note that it does not mean every possible scenario has been tested for these lines. The red lines are the ones that none of the test functions reached.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;pinning-down-slowest-tests&quot;&gt;Pinning Down Slowest Tests&lt;&#x2F;h3&gt;
&lt;p&gt;You can pass the number with --durations&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;powershell&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-powershell &quot;&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span&gt;pytest --durations=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt; — Show all times &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; tests and setup and teardown
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;pytest --durations=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; — Just show me the slowest test
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;pytest --durations=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span&gt; — Slowest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span&gt;, with times, … etc
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Usage:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# example command
&lt;&#x2F;span&gt;&lt;span&gt;pytest --durations=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# example output
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;=============================================================================== slowest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span&gt;durations ===============================================================================
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;0.39&lt;&#x2F;span&gt;&lt;span&gt;s call     tests&#x2F;test_controller&#x2F;test_predict_api.py::test_utterances[116918a3bc5138ccced42e825522d0397d5c29327290c0f912d4a5ade97cdf14-payload0]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;0.37&lt;&#x2F;span&gt;&lt;span&gt;s call     tests&#x2F;test_controller&#x2F;test_predict_api.py::test_utterances[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;593e45693169&lt;&#x2F;span&gt;&lt;span&gt;a78ef9ac329fd2adee8f6912b370196fefb949fd41348674cdcc-payload3]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;0.32&lt;&#x2F;span&gt;&lt;span&gt;s call     tests&#x2F;test_controller&#x2F;test_predict_api.py::test_utterances[1b464d8c8d00d0d78915ccb3362b2339c6545fac33c3d7b018096690302b671b-payload2]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;source: &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;55095253&#x2F;10524266&quot;&gt;here&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;test-performance-visualisation&quot;&gt;Test Performance Visualisation&lt;&#x2F;h3&gt;
&lt;p&gt;There is a 3rd party library called &lt;a href=&quot;https:&#x2F;&#x2F;pypi.org&#x2F;project&#x2F;pytest-benchmark&#x2F;&quot;&gt;Pytest-benchmark&lt;&#x2F;a&gt; which provides a fixture for accurately benchmarking a test case.&lt;&#x2F;p&gt;
&lt;p&gt;You can use it like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;pytest_benchmark.fixture &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;BenchmarkFixture
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;test_greet&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;monkeypatch&lt;&#x2F;span&gt;&lt;span&gt;: MonkeyPatch, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;benchmark&lt;&#x2F;span&gt;&lt;span&gt;: BenchmarkFixture):
&lt;&#x2F;span&gt;&lt;span&gt;    sample_uuid = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(uuid.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;uuid4&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    monkeypatch.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;setattr&lt;&#x2F;span&gt;&lt;span&gt;(uuid, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;uuid4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;lambda&lt;&#x2F;span&gt;&lt;span&gt;: sample_uuid)
&lt;&#x2F;span&gt;&lt;span&gt;    greeting = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Hello &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;assert &lt;&#x2F;span&gt;&lt;span&gt;greeting + sample_uuid == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;benchmark&lt;&#x2F;span&gt;&lt;span&gt;(greet, greeting)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When we run pytest:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span&gt;============================= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;test session starts &lt;&#x2F;span&gt;&lt;span&gt;==============================
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;platform linux &lt;&#x2F;span&gt;&lt;span&gt;-- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Python &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;3.9&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;pytest&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;7.1&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;pluggy&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;benchmark&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;3.4&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;defaults&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;timer&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;perf_counter disable_gc&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;False min_rounds&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;min_time&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;0.000005 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;max_time&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1.0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;calibration_precision&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;warmup&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;False warmup_iterations&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;100000&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;rootdir: &#x2F;home&#x2F;roronoa&#x2F;Desktop&#x2F;workspace&#x2F;personal&#x2F;python_testing
&lt;&#x2F;span&gt;&lt;span&gt;plugins: benchmark-3.4.1
&lt;&#x2F;span&gt;&lt;span&gt;collected 1 item
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;tests&#x2F;test_basic.py .                                                    [100%]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;-------------- generated xml file: &#x2F;tmp&#x2F;tmp-5172mcnCmBQDSfPj.xml ---------------
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;------------------------------------------------------ benchmark: 1 tests -----------------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;Name (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;time in ns&lt;&#x2F;span&gt;&lt;span&gt;)          Min          Max      Mean    StdDev    Median      IQR   Outliers  OPS (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Mops&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;)  Rounds  Iterations
&lt;&#x2F;span&gt;&lt;span&gt;-------------------------------------------------------------------------------------------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;test_greet            340.0019  16,096.9976  395.4294  117.2442  390.0022  37.9987  4900;5713        2.5289  168663           1
&lt;&#x2F;span&gt;&lt;span&gt;-------------------------------------------------------------------------------------------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Legend:
&lt;&#x2F;span&gt;&lt;span&gt;  Outliers: 1 Standard Deviation from Mean; 1.5 IQR (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;InterQuartile Range&lt;&#x2F;span&gt;&lt;span&gt;) from 1st Quartile and 3rd Quartile.
&lt;&#x2F;span&gt;&lt;span&gt;  OPS: Operations Per Second, computed as 1 &#x2F; Mean
&lt;&#x2F;span&gt;&lt;span&gt;============================== 1 passed in 1.55s ===============================
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To visualize it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;pytest &lt;&#x2F;span&gt;&lt;span&gt;--&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;benchmark&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;histogram
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will provide an SVG file that has the histogram of the performance. Pytest-benchmark runs the code several times to give us a median value.     &lt;img src=&quot;&#x2F;images&#x2F;til&#x2F;python-testing&#x2F;pytest-benchmark-histogram.png&quot; alt=&quot;pytest-benchmark histogram visualization of two test cases side by side&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;&#x2F;strong&gt; Pytest-benchmark gives us an accurate picture as opposed to finding the difference between the times at the start and end of a function. It accounts for asynchronous code too.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;the-importance-of-negative-test-cases&quot;&gt;The Importance of Negative Test Cases&lt;&#x2F;h1&gt;
&lt;p&gt;Some time ago, I was watching this video(&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=vKA4w2O61Xo&quot;&gt;The Most Common Cognitive Bias&lt;&#x2F;a&gt;) by Veritasium and I realized that the learnings from the video can directly be applied to writing tests for code.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Here is what I gathered:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;There was a theory that all swans are white. So every white swan that you come across makes you think, “Yeah the theory is pretty good”.&lt;&#x2F;li&gt;
&lt;li&gt;People in the video are asking a question for which they expect the answer to be yes.&lt;&#x2F;li&gt;
&lt;li&gt;But you want to get to the NOs because that is much more information for you than the yes. A “yes” confirms what you are thinking, and a “no” breaks what you are thinking.&lt;&#x2F;li&gt;
&lt;li&gt;The scientific way to prove that something is true is to constantly try and disprove it. Only when we are not able to disprove it, we must be getting closer to something true.&lt;&#x2F;li&gt;
&lt;li&gt;If you think something is true, you need to try as hard as you can to disprove it. That is the only way to not fool yourself. Every &amp;quot;no&amp;quot; is part of the answer leading to &amp;quot;yes&amp;quot;.&lt;&#x2F;li&gt;
&lt;li&gt;Cognitive Bias is such that humans generally want to confirm the truth with similar data (pattern matching), not get closer to the truth by proving false data (edge case detection). Both have value, but the latter is critical. (a comment on the same video)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;applying-it-to-writing-tests&quot;&gt;Applying it to Writing Tests&lt;&#x2F;h3&gt;
&lt;p&gt;Trying to apply what we learned above: Suppose there is a function that takes in a list of numbers and returns True&#x2F;False based on if the numbers follow a certain pattern or not. Considering the code implementation as a black box (which can happen if you are new to the project or if the code is hard to read), how would you go ahead and write the test cases?&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;You can write a test case with 2, 4, and 8 and you get &lt;code&gt;True&lt;&#x2F;code&gt; as the result. This is a positive test case.&lt;&#x2F;li&gt;
&lt;li&gt;Now you can write N such test cases where you expect &lt;code&gt;True&lt;&#x2F;code&gt; as the result. Let’s say you think the pattern is “&lt;strong&gt;multiply by 2&lt;&#x2F;strong&gt;“. Multiple positive test cases will strengthen your belief that you’ve figured out the pattern. But also this can lead to bias.&lt;&#x2F;li&gt;
&lt;li&gt;Instead, once you have a hypothesis, the best way to verify it is to disprove it.&lt;&#x2F;li&gt;
&lt;li&gt;So as the second test case, you can write 2, 4, and 7 and expect to get &lt;code&gt;False&lt;&#x2F;code&gt;. Surprise! you get &lt;code&gt;True&lt;&#x2F;code&gt; again. This negative test case helped you avoid cognitive bias.&lt;&#x2F;li&gt;
&lt;li&gt;After some iterations, you’ve formed a hypothesis that the pattern is “&lt;strong&gt;numbers in ascending order&lt;&#x2F;strong&gt;“. You write some positive test cases. Now you have a stronger hypothesis. Then you write a negative test case (input: 2, 5, 1) and expect to get &lt;code&gt;False&lt;&#x2F;code&gt;. Once your negative test case also passes, that’s when you can be more confident about your hypothesis.&lt;&#x2F;li&gt;
&lt;li&gt;Positive and Negative test cases together give us double confirmation of our hypothesis.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;misc-learnings&quot;&gt;Misc Learnings&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;If your function code is reading any value from environment variables, configuring pytest will have issues. To solve this, you can create a &lt;code&gt;.env&lt;&#x2F;code&gt; file with all the environment variables. Post this, you can configure pytest with VSCode python.&lt;&#x2F;li&gt;
&lt;li&gt;Every statement in a Makefile runs in separate sessions.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>ML System Design Exercise</title>
        <published>2023-05-19T00:00:00+00:00</published>
        <updated>2023-05-19T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://vinay.lol/posts/ml-system-design-excercise/" type="text/html"/>
        <id>https://vinay.lol/posts/ml-system-design-excercise/</id>
        
        <content type="html">&lt;p&gt;Back in October 2022, my manager (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ltbringer&quot;&gt;Amresh&lt;&#x2F;a&gt;) at that time gave me a problem statement to design a platform for ML engineers to carry out the tasks in an ML model lifecycle. The purpose was to help me get better at system design.&lt;&#x2F;p&gt;
&lt;p&gt;Looking back at it, the homework I did and the material I read for this exercise seemed quite fruitful and is still interesting to me. This prompted me to document the way I attacked this problem statement as a future reference for myself.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;em&gt;Design a system to train, deploy, serve, evaluate ML models.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;We receive about 100k model training requests every day.&lt;&#x2F;li&gt;
&lt;li&gt;Assume labelled data exists but you have to design abstractions around it.&lt;&#x2F;li&gt;
&lt;li&gt;We want to deploy quickly most of the time but attempts to deploy repeatedly should come with a cost (i.e. careless attempts to deploy should be penalized).&lt;&#x2F;li&gt;
&lt;li&gt;Some data scientists can be clueless about testing and can try load-testing the production API. How to address this?&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;em&gt;you want to think of other problems like 4 too, this is intentionally a small list&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;questions&quot;&gt;Questions&lt;&#x2F;h1&gt;
&lt;p&gt;Below is the list of questions I asked to further understand the scope of the platform. This section is written in a question-answer fashion, where the question was asked by me and the answer was given by my manager.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;data&quot;&gt;Data&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Question:&lt;&#x2F;strong&gt; How do the users provide data to me? Do they upload it to some storage location from which I have to read from? or do I have to provide them an interface to upload the datasets to a storage location of my choice (which is abstracted to them)?&lt;br &#x2F;&gt;
&lt;strong&gt;Answer:&lt;&#x2F;strong&gt; They have an API. Imagine an interface where they can upload a dataset as a file or a URL.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Question:&lt;&#x2F;strong&gt; Can a user upload multiple versions of the same dataset?&lt;br &#x2F;&gt;
&lt;strong&gt;Answer:&lt;&#x2F;strong&gt; Not for a single training request. Dataset reuse is out of scope, but think about retries if anything fails, you don’t want the user to re-upload the dataset.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Question:&lt;&#x2F;strong&gt; What is the largest size of data that I can expect?&lt;br &#x2F;&gt;
&lt;strong&gt;Answer:&lt;&#x2F;strong&gt; 100 kb avg. 10GB max&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Question:&lt;&#x2F;strong&gt; What kind of datasets should I expect? Can it be of any modality (image&#x2F;text&#x2F;audio&#x2F;video&#x2F;tabular, etc) or of a single modal only? Can I expect a single dataset comprising multiple modalities together?&lt;br &#x2F;&gt;
&lt;strong&gt;Answer:&lt;&#x2F;strong&gt; Any of these should be possible for this platform.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Question:&lt;&#x2F;strong&gt; Should they be able to write pre-processors and post-processors?&lt;br &#x2F;&gt;
&lt;strong&gt;Answer:&lt;&#x2F;strong&gt; Out of scope&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;training&quot;&gt;Training&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Question:&lt;&#x2F;strong&gt; Should the users be allowed to customize how to train the model?&lt;br &#x2F;&gt;
&lt;strong&gt;Answer:&lt;&#x2F;strong&gt; Definitely, but this is an abstraction. How part of the training is assumed to exist.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Question:&lt;&#x2F;strong&gt; Should the users be provided with the ability to tune the hyperparameters before each training request?&lt;br &#x2F;&gt;
&lt;strong&gt;Answer:&lt;&#x2F;strong&gt; optional but bonus points for solving this&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Question:&lt;&#x2F;strong&gt; What type of models should we support? Is it just one type of task like text classification or can it be anything (image classification, linear regression, K-means clustering, video segmentation, image generation, GAN, etc)&lt;br &#x2F;&gt;
&lt;strong&gt;Answer:&lt;&#x2F;strong&gt; This platform should be vendor and model agnostic. Think of it this way: You have N types of models. Their input and output vary. How do you still wrap this complexity under a single predict API?&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Question:&lt;&#x2F;strong&gt; Should the users be able to choose what type of hardware they need for their training task?&lt;br &#x2F;&gt;
&lt;strong&gt;Answer:&lt;&#x2F;strong&gt; The users shouldn’t need to know this. Assume all training jobs require GPUs.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Question:&lt;&#x2F;strong&gt; Should the users be allowed to write their custom training code?&lt;br &#x2F;&gt;
&lt;strong&gt;Answer:&lt;&#x2F;strong&gt; Assume they already have and it&#x27;s in a separate service.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;evaluation&quot;&gt;Evaluation&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Question:&lt;&#x2F;strong&gt; Should they be allowed to edit the loss functions? what about customizing the evaluation script?&lt;br &#x2F;&gt;
&lt;strong&gt;Answer:&lt;&#x2F;strong&gt; Yes&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Question:&lt;&#x2F;strong&gt; Should they be able to compare the evaluation results of multiple models that they have trained?&lt;br &#x2F;&gt;
&lt;strong&gt;Answer:&lt;&#x2F;strong&gt; Optional but bonus points for solving this&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Question&lt;&#x2F;strong&gt;: Should some triggers automatically deploy the model when the evaluation results cross a certain threshold?&lt;br &#x2F;&gt;
&lt;strong&gt;Answer:&lt;&#x2F;strong&gt; Out of Scope.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;serving&quot;&gt;Serving&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Question:&lt;&#x2F;strong&gt; What type of machines are they looking to deploy it on? Is it an on-cloud or some edge device or some on-prem server?&lt;br &#x2F;&gt;
&lt;strong&gt;Answer:&lt;&#x2F;strong&gt; On Cloud&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Question:&lt;&#x2F;strong&gt; Do they require only HTTP serving? Do they need additional servings like gRPC?&lt;br &#x2F;&gt;
&lt;strong&gt;Answer:&lt;&#x2F;strong&gt; HTTP for now&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Question:&lt;&#x2F;strong&gt; Do they need support for auto-scaling enabled?&lt;br &#x2F;&gt;
&lt;strong&gt;Answer:&lt;&#x2F;strong&gt; They shouldn’t need to know what this is. They just want a model trained but your business will crash without it.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Question&lt;&#x2F;strong&gt;: What kind of service and ML metrics do they want to see?&lt;br &#x2F;&gt;
&lt;strong&gt;Answer:&lt;&#x2F;strong&gt; ML metric depends on the model. Service metrics like RQS and logs should be enabled.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Question:&lt;&#x2F;strong&gt; What is the maximum latency they are expecting?&lt;br &#x2F;&gt;
&lt;strong&gt;Answer:&lt;&#x2F;strong&gt; 100 ms&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Question:&lt;&#x2F;strong&gt; How much can the load of requests per model vary?&lt;br &#x2F;&gt;
&lt;strong&gt;Answer:&lt;&#x2F;strong&gt; Each model gets a uniform amount of load&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Question:&lt;&#x2F;strong&gt; Should the users have the flexibility of writing their own docker image? or can I use a base image of my own?&lt;br &#x2F;&gt;
&lt;strong&gt;Answer:&lt;&#x2F;strong&gt; Too much work exposed by letting them know docker etc.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Question:&lt;&#x2F;strong&gt; Should they be allowed to apply some inference optimizations like half-precision, quantization, and pruning?&lt;br &#x2F;&gt;
&lt;strong&gt;Answer:&lt;&#x2F;strong&gt; Out of scope&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Question:&lt;&#x2F;strong&gt; Should they require batch processing or is every model supposed to be giving predictions in real-time? &lt;strong&gt;Answer:&lt;&#x2F;strong&gt; Real-time is required&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Question:&lt;&#x2F;strong&gt; Do they require a staging environment?&lt;br &#x2F;&gt;
&lt;strong&gt;Answer:&lt;&#x2F;strong&gt; Optional&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Question:&lt;&#x2F;strong&gt; Do they require deployment strategies like A&#x2F;B testing or canary deployment?&lt;br &#x2F;&gt;
&lt;strong&gt;Answer:&lt;&#x2F;strong&gt; Yes&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;misc&quot;&gt;Misc&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Question:&lt;&#x2F;strong&gt; Do my users know how to use a notebook?&lt;br &#x2F;&gt;
&lt;strong&gt;Answer:&lt;&#x2F;strong&gt; Yes&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;retrospective-questions&quot;&gt;Retrospective Questions&lt;&#x2F;h3&gt;
&lt;p&gt;While I was compiling these questions, I realized I did not bother enough about the user persona back then:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Who are they?&lt;&#x2F;li&gt;
&lt;li&gt;What is their technical background?&lt;&#x2F;li&gt;
&lt;li&gt;What is and is not their expertise in the whole Software and ML development lifecycle?&lt;&#x2F;li&gt;
&lt;li&gt;What problems are they facing currently?&lt;&#x2F;li&gt;
&lt;li&gt;What technologies are they most comfortable with?&lt;&#x2F;li&gt;
&lt;li&gt;What level of control&#x2F;abstraction would fit them?&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;solutioning&quot;&gt;Solutioning&lt;&#x2F;h1&gt;
&lt;p&gt;I&#x27;ve started studying the design of existing ML tools like MLFlow, Sematic, TrueFoundry, AWS Sagemaker, Label Studio ML Backend, Kubeflow, etc. Below are a few rough sketches of how I thought each component would look like and how they integrate.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;frontend&quot;&gt;Frontend&lt;&#x2F;h2&gt;
&lt;p&gt;The primary interface to interact with the ML platform would be a CLI. There will be CLI commands via which a user can carry out the following:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;User authentication&lt;&#x2F;li&gt;
&lt;li&gt;Submit a training&#x2F;evaluation request with custom params&lt;&#x2F;li&gt;
&lt;li&gt;List previous training&#x2F;evaluation requests&lt;&#x2F;li&gt;
&lt;li&gt;View and compare metrics from different runs&lt;&#x2F;li&gt;
&lt;li&gt;Inspect training&#x2F;evaluation progress of an active run&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;There can also exist a UI via which the user can carry out all these actions.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;data-1&quot;&gt;Data&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;The datasets can be of any type and be present in any form.&lt;&#x2F;li&gt;
&lt;li&gt;It is expected that the users have the data dump with them via ETL pipelines from data sources like &lt;&#x2F;li&gt;
&lt;li&gt;How the data gets loaded (data loaders, streamed, curled via a URL, inbuilt datasets from pytorch or hugging face, etc) and pre-processed will be written by the user.&lt;&#x2F;li&gt;
&lt;li&gt;DVC can be employed to track the data versions via git itself.&lt;&#x2F;li&gt;
&lt;li&gt;The file path of the data will be an ENV variable. When executing locally, the variable can be set to &lt;code&gt;&#x2F;root&#x2F;user&#x2F;local&#x2F;path&lt;&#x2F;code&gt;. When executing remotely, the data can be uploaded to a storage location which will be mounted to the machine where training&#x2F;evaluation is conducted. Hence the variable can be set to &lt;code&gt;&#x2F;mnt&#x2F;cloud&#x2F;storage&#x2F;location&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;development-setup&quot;&gt;Development Setup&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;code-structure&quot;&gt;Code Structure&lt;&#x2F;h3&gt;
&lt;p&gt;The users can write an ML model with the following structure. They are free to use any library or any model or any dependencies. They just have to have a model created in this format.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;MyModel&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;train&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;predict&lt;&#x2F;span&gt;&lt;span&gt;(): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# must return a json object
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;parameterization&quot;&gt;Parameterization&lt;&#x2F;h3&gt;
&lt;p&gt;Users can use special variables inside their code that our library provides. These values will have a default value. They can also override them when creating a training request. Let&#x27;s call our library SDK &lt;code&gt;mllib&lt;&#x2F;code&gt; for now.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# model.py
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;mllib &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;sentry_plugin
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;sklearn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# global dependency
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;sentry_plugin.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;enable&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;MyModel&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.learning_rate = mllib.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Param&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;0.1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.train_data_path = mllib.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Param&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;&#x2F;path&#x2F;to&#x2F;train&#x2F;dataset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.evaluation_data_path = mllib.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;Param&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;&#x2F;path&#x2F;to&#x2F;evaluation&#x2F;dataset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;train&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;numpy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;np &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# local dependency for training step alone
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;optuna
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;evaluate&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;torch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# local dependency for evaluation step alone
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;predict&lt;&#x2F;span&gt;&lt;span&gt;(): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# must return a json object
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;pands &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;pd
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;tf
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;prediction
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;training-evaluation-requests&quot;&gt;Training&#x2F;Evaluation Requests&lt;&#x2F;h3&gt;
&lt;p&gt;The user can make a training&#x2F;evaluation request via the CLI in this fashion:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;mllib&lt;&#x2F;span&gt;&lt;span&gt; model.py&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt; --train --learning_rate&lt;&#x2F;span&gt;&lt;span&gt;=0.001&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt; --local
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will use the ENV variables defined in &lt;code&gt;.env.local&lt;&#x2F;code&gt; and run the code defined in &lt;code&gt;train&lt;&#x2F;code&gt; function locally with a learning_rate of &lt;code&gt;0.001&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;Likewise for running &lt;strong&gt;evaluation&lt;&#x2F;strong&gt; as well:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;mllib&lt;&#x2F;span&gt;&lt;span&gt; model.py&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt; --evaluate --learning_rate&lt;&#x2F;span&gt;&lt;span&gt;=0.001&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt; --local
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Once the user is satisfied that the model is working properly and they have made some verifications to gain confidence, the training can be switched to the cloud via:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;mllib&lt;&#x2F;span&gt;&lt;span&gt; model.py&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt; --train --learning_rate&lt;&#x2F;span&gt;&lt;span&gt;=0.001&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt; --remote
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Upon the execution of this command, the training code is packaged, and submitted to a pool of GPU-enabled machines where code inside the &lt;strong&gt;train&lt;&#x2F;strong&gt; and &lt;strong&gt;evaluate&lt;&#x2F;strong&gt;** functions is executed.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;deployment&quot;&gt;Deployment&lt;&#x2F;h3&gt;
&lt;p&gt;Executing the below command would take the predict function and serves via &lt;a href=&quot;https:&#x2F;&#x2F;firefly-python.readthedocs.io&#x2F;en&#x2F;latest&#x2F;&quot;&gt;firefly-python&lt;&#x2F;a&gt; in a serverless fashion.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;mllib&lt;&#x2F;span&gt;&lt;span&gt; model.py&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt; --serve
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;monitoring&quot;&gt;Monitoring&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;system-monitoring&quot;&gt;System Monitoring&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;The sentry plugin can be enabled to capture exceptions.&lt;&#x2F;li&gt;
&lt;li&gt;Prometheus-Loki-Grafana to capture logs and display them to the user. Additionally, the user can customize the Grafana dashboard with custom PromQL queries to their liking.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;ml-model-monitoring&quot;&gt;ML Model Monitoring&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;All evaluation results made via &lt;code&gt;mllib model.py --evaluate&lt;&#x2F;code&gt; will be available for visualizing in the UI.&lt;&#x2F;li&gt;
&lt;li&gt;For continuous monitoring post-deployment, the evaluate function can be run on a schedule where the dataset will be sourced from annotation tools like Label Studio.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;missing-pieces&quot;&gt;Missing Pieces&lt;&#x2F;h2&gt;
&lt;p&gt;I did not think through the following aspects when designing the solution. Mostly they revolve around reliability and failure resolution&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;If a training request has failed, what should the resolution flow look like?&lt;br &#x2F;&gt;
a. What if it failed because of a runtime error? what would be different if it was a network&#x2F;systems error?&lt;&#x2F;li&gt;
&lt;li&gt;Once the training is done, what happens to the artifacts (model checkpoints, loss graphs, etc)? Where do they get stored and how do they get accessed?&lt;&#x2F;li&gt;
&lt;li&gt;How exactly do we handle the queue of training and evaluation requests?&lt;&#x2F;li&gt;
&lt;li&gt;How to seamlessly shift between local and remote execution?&lt;&#x2F;li&gt;
&lt;li&gt;What if the user wants to use their own cloud resources due to data privacy concerns?&lt;&#x2F;li&gt;
&lt;li&gt;How to package the dependencies and container creation without getting in the user&#x27;s way? Especially because the users do not have a good understanding of docker.&lt;&#x2F;li&gt;
&lt;li&gt;What is the right way to handle data movement between the local execution and the cloud execution?&lt;&#x2F;li&gt;
&lt;li&gt;How is the fleet of GPU-enabled systems managed and receive training&#x2F;evaluation requests?&lt;&#x2F;li&gt;
&lt;li&gt;...some more?&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;final-note&quot;&gt;Final Note&lt;&#x2F;h1&gt;
&lt;p&gt;I&#x27;ve had great fun and learning working on this exercise. There are just too many moving components across the product, service, and infrastructure level and I was forced to think about a lot of aspects that lie outside my expertise. I realized I liked designing not just for usability but for also the user&#x27;s delight.&lt;&#x2F;p&gt;
&lt;p&gt;I might have a go at it again, this time with better research, mockups, and maybe even a PoC 👀&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Custom TLDs</title>
        <published>2023-04-30T00:00:00+00:00</published>
        <updated>2023-04-30T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://vinay.lol/til/custom-tld/" type="text/html"/>
        <id>https://vinay.lol/til/custom-tld/</id>
        
        <content type="html">&lt;p&gt;&lt;strong&gt;Context:&lt;&#x2F;strong&gt; I was just looking at some domain names for my name on Google domains. I saw that &lt;code&gt;vinayvarma.com&lt;&#x2F;code&gt; was already taken. The other domain names were not that exciting and I was not willing to splurge. I got curious: why can&#x27;t something like &lt;code&gt;com.vinayvarma&lt;&#x2F;code&gt; exist?&lt;&#x2F;p&gt;
&lt;p&gt;Here are some questions I had and answers I found to be satisfactory.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;who-decides-what-domain-endings-tlds-are-valid&quot;&gt;Who decides what domain endings (TLDs) are valid?&lt;&#x2F;h3&gt;
&lt;p&gt;The Internet Corporation for Assigned Names and Numbers (ICANN) is the organization responsible for managing the Domain Name System (DNS) and the assignment of Top Level Domain (TLD) names. it is ICANN&#x27;s responsibility to determine which domain endings are valid and can be used for websites and other online services.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;why-do-i-have-to-pay-for-custom-domains-not-even-custom-tlds-who-is-this-money-going-to&quot;&gt;Why do I have to pay for custom domains (not even custom TLDs)? Who is this money going to?&lt;&#x2F;h3&gt;
&lt;p&gt;If I want to buy vinayvarma.xyz now, I need to pay 860 rupees per year to Google domains. In this case, &amp;quot;google domains&amp;quot; is a company authorized by ICANN to manage the registration of domain names.&lt;&#x2F;p&gt;
&lt;p&gt;The domain name registrar (google domains for example) that you register your domain name with collects the fee and retains a portion of it as a registration fee. The rest of the amount goes toward the various entities responsible for managing the global DNS.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-is-the-process-to-make-your-own-tld&quot;&gt;What is the process to make your own TLD?&lt;&#x2F;h3&gt;
&lt;p&gt;TLDR: If I want to have It is super tedious and expensive. &lt;a href=&quot;https:&#x2F;&#x2F;serverfault.com&#x2F;a&#x2F;243335&quot;&gt;Here&lt;&#x2F;a&gt; is (a subset of) a list of checks that ICANN looks at before approving a new TLD. And it can cost more than USD$200,000.&lt;&#x2F;p&gt;
&lt;p&gt;Here are the general steps involved in creating a new TLD:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;The first step is to develop a comprehensive proposal that outlines the purpose and goals of your proposed TLD, the community it will serve, and the technical and operational aspects of running the TLD.&lt;&#x2F;li&gt;
&lt;li&gt;Once your proposal is complete, you can apply for the TLD through ICANN&#x27;s New gTLD Program. The application process is lengthy and requires a detailed examination of your proposal, including technical and financial evaluations.&lt;&#x2F;li&gt;
&lt;li&gt;Your proposal will be evaluated by ICANN to ensure that it meets a variety of technical, financial, and operational criteria. If your proposal passes the evaluation, you will be granted the right to operate the new TLD.&lt;&#x2F;li&gt;
&lt;li&gt;After your TLD is approved, you will need to launch and operate the TLD, including setting up the technical infrastructure, developing policies and procedures, and marketing the TLD to potential registrants.&lt;&#x2F;li&gt;
&lt;li&gt;Important to note that the application fee will be $185,000 and once your proposed TLD is approved, you will be charged $25,000 annually.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;References: &lt;a href=&quot;https:&#x2F;&#x2F;dev.to&#x2F;kailyons&#x2F;tutorial-make-your-own-top-level-domain-name-like-com-org-and-net-jhd&quot;&gt;1&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;adrianroselli.com&#x2F;2011&#x2F;06&#x2F;make-your-own-tld-i-want-bacon.html&quot;&gt;2&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;archive.icann.org&#x2F;en&#x2F;tlds&#x2F;tld-application-process.htm&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;why-are-the-same-domains-available-for-different-prices-by-different-domain-registrars&quot;&gt;Why are the same domains available for different prices by different domain registrars?&lt;&#x2F;h3&gt;
&lt;p&gt;Context: google domains lists &lt;code&gt;vinayvarma.xyz&lt;&#x2F;code&gt; at 860 rupees per year whereas &lt;code&gt;godaddy&lt;&#x2F;code&gt; lists &lt;code&gt;vinayvarma.xyz&lt;&#x2F;code&gt; at 169 rupees (for the first year).&lt;&#x2F;p&gt;
&lt;p&gt;The prices of domain names can vary across different domain registrars for a variety of reasons. Some factors that may affect the price of a domain name include:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Each registrar sets its pricing policies for domain names (popularity of the TLD, length of the registration period, level of customer support included). End of the day, it is a pricing competition.&lt;&#x2F;li&gt;
&lt;li&gt;Some domain registrations would come with additional features like email hosting or SSL certificates.&lt;&#x2F;li&gt;
&lt;li&gt;The price of a domain registration may also vary based on currency exchange rates, especially if you are purchasing a domain from a registrar in a different country.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Timeouts in Postgres RDS</title>
        <published>2023-03-25T00:00:00+00:00</published>
        <updated>2023-03-25T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://vinay.lol/til/mvcc-timeout-postgres/" type="text/html"/>
        <id>https://vinay.lol/til/mvcc-timeout-postgres/</id>
        
        <content type="html">&lt;p&gt;When you are running some long running (SELECT or UPDATE) queries on the read replica (or slave) of a PostgresDB (even AWS RDS Postgres), sometimes you may run into the below error:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#151515;color:#e8e8d3;&quot;&gt;&lt;code&gt;&lt;span&gt;canceling statement due to conflict with recovery
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I misunderstood this as statement timeout and was looking to optimise the query. While that is one of the options to counter this problem, the problem itself is not coming because of a statement timeout. This is actually because of one of the properties of &lt;a href=&quot;https:&#x2F;&#x2F;www.postgresql.org&#x2F;docs&#x2F;7.1&#x2F;mvcc.html&quot;&gt;MVCC in Postgres&lt;&#x2F;a&gt;. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-causes-this-issue&quot;&gt;What causes this issue?&lt;&#x2F;h2&gt;
&lt;p&gt;Imagine a Write statement is executed on a table in the master Postgres instance when there is a running select query on the same table in the read replica instance, there are two options:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Wait for the SELECT statement to be finished before applying the WAL record. In this case, the replication lag increases.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Apply the WAL record, and then cancel the SELECT statement. In this case, you get the error &amp;quot;canceling statement due to conflict with recovery&amp;quot;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;You get this error typically due to long running queries on the read replica.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;repost.aws&#x2F;knowledge-center&#x2F;rds-postgresql-error-conflict-recovery&quot;&gt;Reference&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-to-get-around-statement-timeout&quot;&gt;How to get around statement timeout?&lt;&#x2F;h2&gt;
&lt;p&gt;The above is different from a regular statement timeout. Each Postgres instance has a default timeout of 30 seconds (if you are using Postgresversion &amp;lt; 9.3). Post 9.3 version, the default statement timeout is set to 0 seconds (which means there is no time limit).&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You can configure the &lt;code&gt;statement_timeout&lt;&#x2F;code&gt; parameter in the &lt;code&gt;postgresql.conf&lt;&#x2F;code&gt; file. However, this will be applied to all connections and all Postgresusers. This can cause long standing resource intensive queries slowing down your DB.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;You can configure the timeout just for your session. You can do it with psql like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;    psql &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;postgresql:&#x2F;&#x2F;username:passwrod@hostname:port&#x2F;db_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and then in the session shell: &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;    psql (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt; (Ubuntu &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;0ubuntu0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;04&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;), server &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    SSL connection (protocol: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;TLSv1&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, cipher: ECDHE-RSA-AES256-GCM-SHA384, bits: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;256&lt;&#x2F;span&gt;&lt;span&gt;, compression: off)
&lt;&#x2F;span&gt;&lt;span&gt;    Type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;help&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt; for help.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    db_name=&amp;gt; set statement_timeout=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;2000&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    SET
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now in this session, all the subsequent queries will have a timeout of 2000 milliseconds (2 seconds).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;You can do the same from Python like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;psycopg2
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# Establish a connection to the database
&lt;&#x2F;span&gt;&lt;span&gt;    conn = psycopg2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;connect&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;host&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;your_host_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;port&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;your_port_number&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;database&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;your_database_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;your_user_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;your_password&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# Open a cursor to perform database operations
&lt;&#x2F;span&gt;&lt;span&gt;    cur = conn.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;cursor&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# Set the statement timeout to 2 seconds
&lt;&#x2F;span&gt;&lt;span&gt;    cur.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;SET statement_timeout = &amp;#39;2000&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# Execute a SELECT query
&lt;&#x2F;span&gt;&lt;span&gt;    cur.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;FROM your_table_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# Fetch all the results from the query
&lt;&#x2F;span&gt;&lt;span&gt;    rows = cur.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;fetchall&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# Print out the results
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;row &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;rows:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(row)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# Close the cursor and connection to the database
&lt;&#x2F;span&gt;&lt;span&gt;    cur.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    conn.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;misc&quot;&gt;Misc&lt;&#x2F;h3&gt;
&lt;p&gt;Below is a query that you can use to get statistics on how many times statement conflict between master and read replica has occurred.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;select
&lt;&#x2F;span&gt;&lt;span&gt;    datname as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    confl_snapshot as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;queries_cancelled&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;    
&lt;&#x2F;span&gt;&lt;span&gt;from pg_stat_database_conflicts
&lt;&#x2F;span&gt;&lt;span&gt;where 
&lt;&#x2F;span&gt;&lt;span&gt;    confl_snapshot &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;order by 
&lt;&#x2F;span&gt;&lt;span&gt;    confl_snapshot desc
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>General Guide to Finding Accommodation In a New City</title>
        <published>2023-03-19T00:00:00+00:00</published>
        <updated>2024-07-21T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://vinay.lol/posts/house-hunting/" type="text/html"/>
        <id>https://vinay.lol/posts/house-hunting/</id>
        
        <content type="html">&lt;h1 id=&quot;what-is-this-guide&quot;&gt;What is this guide?&lt;&#x2F;h1&gt;
&lt;p&gt;When you have to move to a new city (long-term), finding accommodation can be a daunting task. There is a lot to take care of and manage: Food, Washing, Cleaning, Transport, etc. If you’ve never lived outside your home, it can get overwhelming. I’ve documented some points on what helped me during my experience of flat hunting.&lt;&#x2F;p&gt;
&lt;p&gt;Most of what I have below will be relevant to folks who are &lt;strong&gt;relocating to Bangalore (India) for work purposes and looking to rent a flat.&lt;&#x2F;strong&gt; That being said, it can be applied to most cases (like another city or looking for PG accommodations).&lt;&#x2F;p&gt;
&lt;h1 id=&quot;before-moving&quot;&gt;Before Moving&lt;&#x2F;h1&gt;
&lt;p&gt;Here are some things you can do before you set out to move to a new city:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Get an idea of which area your place of work is put up at. It is also helpful to know about the surrounding areas.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Check if you have any friends or relatives who live in those areas or in that city. If you have someone, call them up to inquire about things like house pricing, transport facilities, etc.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;If possible, see if you can stay with them until you find a place for yourself. This is the best option to go for when there is a lot of uncertainty. Even if things are not going as planned, you will always have a safety net.&lt;&#x2F;li&gt;
&lt;li&gt;If you don’t know anyone in the city or any known person to share a flat with, taking accommodation in a decent PG is probably the best option. You can settle down and get to know the area better. However, don’t expect this to be rosy. You may have to make adjustments in your personal space.
&lt;ol&gt;
&lt;li&gt;You can find decent PGs in the range of 9k to 12k per month per person which includes all the basic amenities like food, wifi, and beds, water, drinking water, electricity. Heavily depends on the area though.&lt;br &#x2F;&gt;
&lt;strong&gt;Note:&lt;&#x2F;strong&gt; Most PGs do not provide Lunch on weekdays. If your place of work offers you food, well and good :)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;You can also go on to housing sites like housing.com, nobroker, magicbricks, and airbnb to get an idea of the price range. The idea is to get a ballpark figure on how much is it gonna cost you if you were to rent a flat.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;While you can check out properties online and maybe even call them up to check for availability, never pay anything in advance before actually visiting the place and checking it out yourself.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Pictures can be very misleading&lt;&#x2F;strong&gt;. What you see IRL can be very different from pictures. It is particularly hard to gauge the size of the place. I remember an instance when a flat looked superb in pictures but the bedrooms were literally the size of matchboxes IRL.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;There are scams&lt;&#x2F;strong&gt;. There is one in particular where the person (claiming to be the owner) asks you to send ~4000&#x2F;- before you can visit the place. They tell you that you have the option to get it back if you don’t like the place. &lt;strong&gt;Do not pay!!&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;It is not just the room&lt;&#x2F;strong&gt;. Sometimes even though the room looks decent enough in pictures, the surrounding of the flat&#x2F;building can be quite messy (which you will only see when you visit the place).&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;planning&quot;&gt;Planning&lt;&#x2F;h1&gt;
&lt;p&gt;Once you have an idea of the cost per month according to your lifestyle, it is good to make a list of things that you want to have. Then categorize them into must-haves (things that you cannot compromise on) and good-to-haves (things that you are ok with not having if everything else is good).&lt;&#x2F;p&gt;
&lt;style&gt;

    .svg-icon-container{
        min-height: 1rem;
        margin: 2px 2px 0px 0px;
    }

    .alert-box-container{
        display: flex;
        border-radius: 4px;
        min-height: 1rem;
        vertical-align: center;
        padding: 0.75rem 1rem 0.75rem 0.5rem;
        border-left-style: solid;
        border-left-width: 0.25rem;
    }

    #info-id{
        background-color: #EBF8FE;
        color: #2A6CB3
    }

    #warning-id{
        background-color: #FCF4F5;
        color: #D74937
    }

&lt;&#x2F;style&gt;


&lt;div&gt;



    


&lt;div class=&quot;alert-box-container&quot; id=info-id&gt;
    &lt;div class = &quot;svg-icon-container&quot;&gt;
        
            &lt;svg fill=&quot;currentColor&quot; width=&quot;24px&quot; height=&quot;24px&quot; viewBox=&quot;0 0 24 24&quot; xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M20 12C20 7.58172 16.4183 4 12 4C7.58172 4 4 7.58172 4 12C4 16.4183 7.58172 20 12 20C16.4183 20 20 16.4183 20 12ZM11 8C11 8.55228 11.4477 9 12 9C12.5523 9 13 8.55228 13 8C13 7.44772 12.5523 7 12 7C11.4477 7 11 7.44772 11 8ZM12 10C13 10 13 11 13 11V16C13 16 13 17 12 17C11 17 11 16 11 16V11C11 11 11 11 10.5 11C10 11 10 10 10 10H12Z&quot;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;
                
    &lt;&#x2F;div&gt;
    This will greatly help in situations where you are presented with multiple options and you have to take quick decisions while keeping your budget in mind.
&lt;&#x2F;div&gt;

&lt;&#x2F;div&gt;
&lt;p&gt;An important tip here. If you can afford it, please consider the proximity of your flat to your place of work as the top priority. &lt;&#x2F;p&gt;
&lt;style&gt;

    .svg-icon-container{
        min-height: 1rem;
        margin: 2px 2px 0px 0px;
    }

    .alert-box-container{
        display: flex;
        border-radius: 4px;
        min-height: 1rem;
        vertical-align: center;
        padding: 0.75rem 1rem 0.75rem 0.5rem;
        border-left-style: solid;
        border-left-width: 0.25rem;
    }

    #info-id{
        background-color: #EBF8FE;
        color: #2A6CB3
    }

    #warning-id{
        background-color: #FCF4F5;
        color: #D74937
    }

&lt;&#x2F;style&gt;


&lt;div&gt;



    


&lt;div class=&quot;alert-box-container&quot; id=info-id&gt;
    &lt;div class = &quot;svg-icon-container&quot;&gt;
        
            &lt;svg fill=&quot;currentColor&quot; width=&quot;24px&quot; height=&quot;24px&quot; viewBox=&quot;0 0 24 24&quot; xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M20 12C20 7.58172 16.4183 4 12 4C7.58172 4 4 7.58172 4 12C4 16.4183 7.58172 20 12 20C16.4183 20 20 16.4183 20 12ZM11 8C11 8.55228 11.4477 9 12 9C12.5523 9 13 8.55228 13 8C13 7.44772 12.5523 7 12 7C11.4477 7 11 7.44772 11 8ZM12 10C13 10 13 11 13 11V16C13 16 13 17 12 17C11 17 11 16 11 16V11C11 11 11 11 10.5 11C10 11 10 10 10 10H12Z&quot;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;
                
    &lt;&#x2F;div&gt;
    I cannot emphasize how much of a life hack it is to just be able to walk (or take a metro) to your place of work or study or where you practice your hobbies.

    Traveling long distances may seem fine initially, but it can be frustrating, especially if you have to do it every day. Even if you have a vehicle, you may have to travel at odd times to beat the traffic (especially true in Bangalore). If you don&amp;#x27;t have a vehicle, getting around in some areas (that have no metro or single bus connectivity) can be difficult.
&lt;&#x2F;div&gt;

&lt;&#x2F;div&gt;&lt;h2 id=&quot;places-to-search&quot;&gt;Places to Search&lt;&#x2F;h2&gt;
&lt;p&gt;Here are some online resources for you to search for accommodations. Please note that some are specific to Bangalore. If you are looking to relocate to a place other than Bangalore, you might find the equivalent of these resources for your city on these Social Media platforms.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Facebook:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;These are the largest groups out there to find flatmates and houses for rent in Bangalore&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.facebook.com&#x2F;groups&#x2F;flat.and.flatmates.without.brokers.bangalore?sorting_setting=CHRONOLOGICAL_LISTINGS&quot;&gt;flat.and.flatmates.without.brokers.bangalore&lt;&#x2F;a&gt;
&lt;ol&gt;
&lt;li&gt;I found a vacancy in my current flat in this group.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.facebook.com&#x2F;groups&#x2F;HouseForRentBangalore?sorting_setting=CHRONOLOGICAL_LISTINGS&quot;&gt;House For Rent Bangalore&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.facebook.com&#x2F;groups&#x2F;1019544874745682?sorting_setting=CHRONOLOGICAL_LISTINGS&quot;&gt;Flat and Flatmates Bangalore&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;strong&gt;Twitter:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You can follow these accounts and have tweet notifications on&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;fmrbangalore&quot;&gt;fmrbangalore&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;BangaloreRoomi&quot;&gt;BangaloreRoomi&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;twitrbnb&quot;&gt;twitrbnb&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;strong&gt;Housing Sites:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In addition to the FB groups, this is where you can find entire flats for rent. Beware that many lists can be by brokers. The standard price of brokerage is 1 month of rent.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.nobroker.in&#x2F;&quot;&gt;NoBroker&lt;&#x2F;a&gt;
&lt;ol&gt;
&lt;li&gt;You can also look for vacancy posts by current tenants here.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;housing.com&#x2F;&quot;&gt;housing.com&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.magicbricks.com&#x2F;&quot;&gt;MagicBricks&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.airbnb.co.in&#x2F;&quot;&gt;AirBnb&lt;&#x2F;a&gt;
&lt;ol&gt;
&lt;li&gt;Here the trick is to contact the owner and finalize a deal offline. If you are planning to stay for a longer period of time (at least 6 months). You can get it a lot cheaper than what appears on the Airbnb site.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;strong&gt;Franchises:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;There are multiple franchise-based accommodations. These are generally very good options if you have a slightly higher budget.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ff21.in&#x2F;&quot;&gt;ff21&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.stanzaliving.com&#x2F;&quot;&gt;Stanza Living&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zolostays.com&#x2F;&quot;&gt;Zolo hostels&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;thehelloworld.com&#x2F;&quot;&gt;Hello World&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;grexter.in&#x2F;&quot;&gt;Grexter&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;isthara.com&#x2F;&quot;&gt;Isthara&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;draperstartuphouse.com&#x2F;&quot;&gt;Draper Startup House&lt;&#x2F;a&gt;
&lt;ol&gt;
&lt;li&gt;If you are into startups and are looking to be surrounded by people with similar interests, this is a good option but it is slightly more expensive.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;strong&gt;Here is a general rule of thumb:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;If you are short on time and don&#x27;t want to go through all the hassle
&lt;ol&gt;
&lt;li&gt;Try contacting some brokers.&lt;&#x2F;li&gt;
&lt;li&gt;You can get the No Broker package. I’ve heard from many folks that they found it very helpful in terms of saving time.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;If you are short on money
&lt;ol&gt;
&lt;li&gt;You can save brokerage if you can find a vacancy by yourself. One option is to rent a vehicle (&lt;a href=&quot;https:&#x2F;&#x2F;www.royalbrothers.com&#x2F;&quot;&gt;Royal Brothers&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;vogo.in&#x2F;&quot;&gt;Vogo&lt;&#x2F;a&gt;) or a &lt;a href=&quot;https:&#x2F;&#x2F;www.yulu.bike&#x2F;products&#x2F;dex&#x2F;&quot;&gt;Yulu Dex&lt;&#x2F;a&gt; or ask a friend. Then keep roaming around your area of interest and you will find To-Let boards (I found a lot of good options this way).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Beware:&lt;&#x2F;strong&gt; The To-Let boards you see on electric poles and trees are most likely broker numbers. If you see a To-Let board attached to the gate or walls of a house, then it is safe to assume that is by the owners themselves.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;moving-into-a-flat&quot;&gt;Moving into a flat&lt;&#x2F;h2&gt;
&lt;p&gt;If you&#x27;re looking to move into a flat, here are a few questions you can ask or check with the existing tenants (in the case it is pre-occupied) or the owner:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;How long have the existing tenants been staying there?&lt;&#x2F;li&gt;
&lt;li&gt;You can ask the existing tenants if they faced any issues with the owner.
&lt;ol&gt;
&lt;li&gt;In many cases, the owner lives far away. This is the best case.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Is anyone of the current tenants expected to leave soon? If yes, then you will have a task to find their replacement.&lt;&#x2F;li&gt;
&lt;li&gt;Is Wi-Fi present already?&lt;&#x2F;li&gt;
&lt;li&gt;Is a Washing Machine present already?&lt;&#x2F;li&gt;
&lt;li&gt;Is there any setup cost?
&lt;ol&gt;
&lt;li&gt;Usually, this includes the items that the existing tenants have already bought and are looking to transfer to you.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Is there a Geyser?
&lt;ol&gt;
&lt;li&gt;Even unfinished flats in Bangalore will have a Geyser. But you don’t want any surprises.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;How and where to get drinking water from?&lt;&#x2F;li&gt;
&lt;li&gt;Is there any maintenance charge? What does the maintenance charge include?&lt;&#x2F;li&gt;
&lt;li&gt;Is the water bill part of the maintenance charge?&lt;&#x2F;li&gt;
&lt;li&gt;Any parking charge?&lt;&#x2F;li&gt;
&lt;li&gt;Is there a cook already? If yes,
&lt;ol&gt;
&lt;li&gt;What is the charge for the cook per person per month?&lt;&#x2F;li&gt;
&lt;li&gt;Does the cook come on all days?
&lt;ol&gt;
&lt;li&gt;It is the norm that cooks work from Monday to Saturday only.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Does the cook make food for breakfast, lunch, and dinner?
&lt;ol&gt;
&lt;li&gt;It is the norm that the cook makes breakfast and lunch together in the morning and come back in the night to make dinner.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Is the cook comfortable with non-veg food?&lt;&#x2F;li&gt;
&lt;li&gt;If there is no cook present, you can ask the neighboring flatmates or others in the same building how they are managing food.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;If you plan to cook (or hire a cook to make) food at home, a fridge is compulsory. Check if they have a fridge already.&lt;&#x2F;li&gt;
&lt;li&gt;Is there a maid already? If yes, what does she take care of?&lt;&#x2F;li&gt;
&lt;li&gt;If you are occupying the place of a tenant who is leaving, ask if they are leaving any of the furniture or appliances behind.&lt;&#x2F;li&gt;
&lt;li&gt;Check if there are any extra charges apart from rent, maid, water, and electricity that recur every month.&lt;&#x2F;li&gt;
&lt;li&gt;Check the phone signals while you are at the flat location. If you can comfortably watch YouTube, it should be good enough.&lt;&#x2F;li&gt;
&lt;li&gt;Bathrooms and kitchens are very important. Check if all the taps are running and if there is a backup for water.&lt;&#x2F;li&gt;
&lt;li&gt;Check how garbage is supposed to be collected. What if you need a backup for it?&lt;&#x2F;li&gt;
&lt;li&gt;Check if the house (or at least the kitchen) was treated with pest control. It is a huge pain if there are cockroaches already. They just don&#x27;t go. In the words of a painful tenant -&amp;gt; &amp;quot;Here&#x27;s how you deal with a cockroach: &lt;strong&gt;1.&lt;&#x2F;strong&gt; Burn the house. &lt;strong&gt;2&lt;&#x2F;strong&gt;.** Find a new house.&amp;quot;&lt;&#x2F;li&gt;
&lt;li&gt;Make sure you have an exhaust fan in the kitchen. It is rarely the case that there is none, but as I said, you don&#x27;t want any surprises. The same goes for the bathroom as well.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;compatibility-with-roommates&quot;&gt;Compatibility with Roommates&lt;&#x2F;h2&gt;
&lt;p&gt;If you&#x27;re planning on sharing a flat, here are a few things to consider:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Compatibility of food choices - Vegetarian, Vegan, or Non-vegetarian&lt;&#x2F;li&gt;
&lt;li&gt;Smoking or drinking habits of your roommates.&lt;&#x2F;li&gt;
&lt;li&gt;If you or your roommate like to host house parties or have friends over, it is nice to have an estimate on the frequency of this.&lt;&#x2F;li&gt;
&lt;li&gt;An estimate of spending capacity and lifestyle of each other.
&lt;ol&gt;
&lt;li&gt;Let&#x27;s say your washing machine isn&#x27;t working properly, it is nice to have all of you either agree on repairing it or getting a new one. If one follows the lifestyle of looking for a repair and another is eying on a new one, it will lead to awkward situations.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;&#x2F;strong&gt; Some of these questions may feel intrusive to ask but it is important to make sure what you are getting into. Bad roommates can be a nightmare. You can decide on what is an absolute NO and check if you all are on the same page.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;before-you-finalise-a-deal-renting-a-flat&quot;&gt;Before You Finalise a Deal (renting a flat)&lt;&#x2F;h2&gt;
&lt;p&gt;When you find a flat that checks all your boxes, here are some things you can check with the owner.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Always try to negotiate on rent and the deposit amount. All owners expect you to negotiate and hence will quote a slightly higher amount at the beginning itself.
&lt;ol&gt;
&lt;li&gt;It is common for owners to quote unreasonable amounts of deposit (as much as 10 months of rent as a security deposit).&lt;&#x2F;li&gt;
&lt;li&gt;In my experience, they are usually open to reducing either the rent or the deposit amount. But you can ask for a reduction in both. In Feb 20203, we negotiated a 28k rent and 2.8L deposit deal to a 26k rent and 1.4L deposit deal for a 2BHK near Indiranagar (we could not go forward with that option due to some other reason).&lt;&#x2F;li&gt;
&lt;li&gt;If you really like a house but the security deposit is too high, you can ask if the payment of the security deposit can be made in installments.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Some things to check for in the rental agreement document (a document provided by the owner to the tenants):
&lt;ol&gt;
&lt;li&gt;What is the date to pay the rent every month?&lt;&#x2F;li&gt;
&lt;li&gt;Once you&#x27;ve moved in, how many days do you have to stay before you can move out? If the owner asks you to vacate the flat, how many days do you get to stay before you move out? This is called a lock-in period.
a. Usually both of them are the same. The norm is 1-3 months.&lt;&#x2F;li&gt;
&lt;li&gt;What is the lifetime of the rental agreement?
a. Usually it is 11 months after which the rental agreement expires and a new one is supposed to be created.&lt;&#x2F;li&gt;
&lt;li&gt;What is the annual rent increment percentage upon the expiration of the agreement?
a. If this information is not present, the owner can ask for any unreasonable amount as rent post the expiration of the current rental agreement and you will find yourself in a pay-or-moveout situation.&lt;&#x2F;li&gt;
&lt;li&gt;If you are sharing the flat with other people (1+ BHK), it is better to have the rental agreement written jointly on all your names. This will help when you file ITR as most people would usually have an HRA component in their CTC structure.&lt;&#x2F;li&gt;
&lt;li&gt;Take note of any cases where you won&#x27;t be getting your full deposit amount back.&lt;&#x2F;li&gt;
&lt;li&gt;What all are included as part of the maintenance fee? Is any of the furniture included?
a. If yes, make sure to have it written on who owns the repair of an item (owner or the tenant).&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Take assurance that you will get a receipt of the deposit amount that you will pay. There are a lot of cases I heard about not getting the deposit amount back.&lt;&#x2F;li&gt;
&lt;li&gt;What is the advance amount that you can pay to finalize the deal for you? This is called a token advance. This can be deducted from the rent or the security deposit amount that you will pay later.&lt;&#x2F;li&gt;
&lt;li&gt;Before signing the rental agreement, read through all the clauses carefully. Ask if something can be edited if you find something problematic.&lt;&#x2F;li&gt;
&lt;li&gt;Most owners would use get the house deep cleaned and painted before handing it over from the previous tenants to the next tenants. However, there is no guarantee.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;making-the-decision&quot;&gt;Making the Decision&lt;&#x2F;h1&gt;
&lt;p&gt;The entire process can get a little overwhelming, and you will face situations where you have to make decisions quickly. A small change in your situation can completely turn around decisions 180 degrees and you may have to re-evaluate all the options. I’ve seen people not finding a good place for like 2 months (in areas like Indiranagar, Koramangala, etc). But that is how it is going to be.&lt;&#x2F;p&gt;
&lt;p&gt;So it&#x27;s best to write down the things that you cannot compromise on and things that are nice to have. Being patient pays well.&lt;&#x2F;p&gt;
&lt;p&gt;If you have any questions, feel free to drop me a DM on Twitter: &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;roronoazoro_189&quot;&gt;@roronoazoro_189&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;further-reading&quot;&gt;Further Reading&lt;&#x2F;h1&gt;
&lt;p&gt;I just found &lt;a href=&quot;https:&#x2F;&#x2F;manassaloi.com&#x2F;2021&#x2F;01&#x2F;03&#x2F;ultimate-house-hunting.html&quot;&gt;this&lt;&#x2F;a&gt; amazing guide by &lt;a href=&quot;https:&#x2F;&#x2F;x.com&#x2F;manasjsaloi&quot;&gt;Manas&lt;&#x2F;a&gt; which is definitely worth checking out!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>GitLab CI&#x2F;CD Intermediate</title>
        <published>2023-02-25T00:00:00+00:00</published>
        <updated>2023-03-20T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://vinay.lol/til/gitlab-ci-cd-2/" type="text/html"/>
        <id>https://vinay.lol/til/gitlab-ci-cd-2/</id>
        
        <content type="html">&lt;p&gt;I&#x27;ve been working on a CI job that would help me apply a mandate for a Git workflow for all dev teams at my company. During this process, I discovered a lot of functionalities that GitLab CI&#x2F;CD offers that you can use to do cool things. I also got to correct some misconceptions I had.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;misconceptions&quot;&gt;Misconceptions&lt;&#x2F;h3&gt;
&lt;p&gt;These made me feel dumb but that&#x27;s okay.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;I realised that you don&#x27;t have to use GitLab CI&#x2F;CD when your code is on GitLab. You can use CI tools like Circle CI, Jenkins etc. GitLab itself has links on how to use these external plugins. &lt;a href=&quot;https:&#x2F;&#x2F;docs.gitlab.com&#x2F;ee&#x2F;user&#x2F;project&#x2F;integrations&#x2F;index.html#available-integrations&quot;&gt;Reference&lt;&#x2F;a&gt;.&lt;br &#x2F;&gt;
a. You can also use GitLab CI&#x2F;CD from GitHub. &lt;a href=&quot;https:&#x2F;&#x2F;docs.gitlab.com&#x2F;ee&#x2F;ci&#x2F;ci_cd_for_external_repos&#x2F;github_integration.html&quot;&gt;Reference&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;For the longest time, I was under the assumption that GitLab runner is a machine provided by GitLab where we can run our CI&#x2F;CD pipelines. I realised, GitLab runner is a software written in Go. You can take a server from your private cloud and install the GitLab runner software on it and get the server registered on your GitLab instance (all tiers).&lt;br &#x2F;&gt;
a. A GitLab CI&#x2F;CD pipeline is run in a CI server that we (a company if you work for one) own by the GitLab runner software. The GitLab runner software running on our CI server receives a hook from the GitLab project when there is a new merge request (this setting on what will trigger a CI pipeline must be configured on the GitLab project repository). Then the GitLab runner software clones the repository files into the CI server and executes the CI&#x2F;CD jobs written in the &lt;code&gt;.gitlab-ci.yml&lt;&#x2F;code&gt; file.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;new-learnings&quot;&gt;New Learnings&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Adding a &lt;code&gt;.gitlab-ci.yml&lt;&#x2F;code&gt; file would be enough to trigger pipelines for every merge request and push it into the Gitlab instance. Inferred this from: &amp;quot;When you add a &lt;code&gt;.gitlab-ci.yml file&lt;&#x2F;code&gt; to your repository, GitLab detects it and an application called GitLab Runner runs the scripts defined in the jobs.&amp;quot; &lt;a href=&quot;https:&#x2F;&#x2F;docs.gitlab.com&#x2F;ee&#x2F;ci&#x2F;yaml&#x2F;gitlab_ci_yaml.html&quot;&gt;Reference&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Branch Pipeline V&#x2F;S Merge Request Pipeline:&lt;&#x2F;strong&gt; You can configure your pipeline to run every time you commit changes to a branch. This type of pipeline that gets created by a &lt;code&gt;git push&lt;&#x2F;code&gt; is called a &lt;strong&gt;Branch pipeline&lt;&#x2F;strong&gt;. You can also configure your pipeline to run when there is a new merge request. This type of pipeline is called a &lt;strong&gt;Merge Request pipeline&lt;&#x2F;strong&gt;. It is important to note that a merge request pipeline is run every time you make changes to the source branch for a merge request.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;By default, a pipeline is triggered for every git push and every MR. If you have an open MR and you pushed to the source branch of it, you will trigger two pipelines (one triggered by a push event and another by an updated merge request event). If you don&#x27;t want a pipeline to be triggered for every push, you can do it like this&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;lint-job&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;ubuntu
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;stage&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;lint
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;	- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;echo &amp;quot;My milkshake brings all the boys to the yard&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;	- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;some_linting_script.sh
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;rules&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;	- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;$CI_PIPELINE_SOURCE == &amp;quot;merge_request_event&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# only runs when there is a merge request.
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;exists&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;		- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;**&#x2F;*.go&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# only runs if there are Go files present
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can also configure a job to run on only the creation of a merge request like below&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;	- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;echo &amp;quot;I&amp;#39;m in love with the shape of you!&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;only&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;	- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;merge_requests
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can also disable triggering pipelines for a git push with git push options like &lt;code&gt;git push -o ci.skip&lt;&#x2F;code&gt; but every push into an open MR would still re-trigger the pipelines even if you had the above condition. &lt;a href=&quot;https:&#x2F;&#x2F;docs.gitlab.com&#x2F;ee&#x2F;user&#x2F;project&#x2F;push_options.html&quot;&gt;Reference&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;You can configure it to require a successful pipeline for a merge (between two branches) to happen. However, this setting can conflict with configs like only&#x2F;expect, rules that you write in your &lt;code&gt;.gitlab-ci.yml&lt;&#x2F;code&gt; file that do not trigger new pipelines.&lt;br &#x2F;&gt;
&lt;strong&gt;Example:&lt;&#x2F;strong&gt; Let&#x27;s say you added a condition that your pipeline should run only when merge requests are created to the master branch like below:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;dummy-job&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;stage&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;dummy_stage
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;rules&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;	- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == &amp;quot;master&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;	- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;echo &amp;quot;I like to move it move it&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and you configured that a pipeline must succeed for an MR to be labeled as ready to merge, then you would not be able to merge MRs to any other branches. &lt;a href=&quot;https:&#x2F;&#x2F;docs.gitlab.com&#x2F;ee&#x2F;user&#x2F;project&#x2F;merge_requests&#x2F;merge_when_pipeline_succeeds.html#require-a-successful-pipeline-for-merge&quot;&gt;Reference&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;When you make an MR, the &lt;code&gt;gitlab-ci.yml&lt;&#x2F;code&gt; present in the source branch is used for running the pipeline. When a pipeline is triggered by an MR (Merge Request pipeline), you will see this message on it: &amp;quot;This pipeline ran on the contents of this merge request&#x27;s source branch, not the target branch&amp;quot;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;When there are multiple Merge Requests where the source branch of one MR is the same as the target branch of another MR, GitLab automatically updates them when one of them is merged. &lt;a href=&quot;https:&#x2F;&#x2F;docs.gitlab.com&#x2F;ee&#x2F;user&#x2F;project&#x2F;merge_requests&#x2F;#update-merge-requests-when-target-branch-merges&quot;&gt;Reference&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;If you want the entire pipeline (all the jobs present in the &lt;code&gt;.gitlab-ci.yml&lt;&#x2F;code&gt; file) then you can specify it like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;workflow&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;rules&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;	- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;$CI_PIPELINE_SOURCE == &amp;#39;merge_request_event&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;or&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;workflow&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;only&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;	- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;merge_requests
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;If you want to write a multiline script for a job, you can do it like this&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;dummy-job&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;stage&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;dummy_stage
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;rules&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;	- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;$CI_PIPELINE_SOURCE == &amp;quot;merge_request_event&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;	- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span&gt;	  if [[ &amp;quot;SP Balasubramanyam&amp;quot; == &amp;quot;Greatest Singer&amp;quot;]]
&lt;&#x2F;span&gt;&lt;span&gt;	    then
&lt;&#x2F;span&gt;&lt;span&gt;		echo &amp;quot;Allantha dhoorala aa thaaraka...&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;	  else
&lt;&#x2F;span&gt;&lt;span&gt;		echo &amp;quot;Whatever&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;	  fi
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;You are allowed to use regex for file matching in the &lt;code&gt;exists&lt;&#x2F;code&gt; field. However, if you want to do regex matches in the &lt;code&gt;rules&lt;&#x2F;code&gt; field itself (when you want to run some job based on the branch, for example)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;dummy-job&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;stage&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;dummy_stage
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;rules&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;	- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;$CI_PIPELINE_SOURCE == &amp;quot;merge_request_event&amp;quot; &amp;amp;&amp;amp; $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME !~ &#x2F;^hotfix-&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;	- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;echo &amp;quot;Merge request is coming from a hotfix branch&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The above dummy-job will run as part of your pipeline only when there is a merge request coming from a hotfix branch.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;You can lint check your &lt;code&gt;.gitlab.yml&lt;&#x2F;code&gt; file on the pipelines page. You can also try simulating a pipeline to figure out issues with needs&#x2F;rules that would only pop up in the run time. &lt;a href=&quot;https:&#x2F;&#x2F;docs.gitlab.com&#x2F;ee&#x2F;ci&#x2F;lint.html&quot;&gt;Reference&lt;&#x2F;a&gt;.&lt;br &#x2F;&gt;
a. If you are using VSCode, you can use this extension to have the yaml file CI linted right there &lt;a href=&quot;https:&#x2F;&#x2F;docs.gitlab.com&#x2F;ee&#x2F;ci&#x2F;lint.html#simulate-a-pipeline&quot;&gt;Reference&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;If you want to quickly try out editing CI variables, you can use it like this: &lt;code&gt;git push -o ci.variable=&amp;quot;MAX_RETRIES=10&amp;quot; -o ci.variable=&amp;quot;MAX_TIME=600&amp;quot;&lt;&#x2F;code&gt;. Once you are satisfied with the CI variables, then you actually edit them. This way you can avoid making several commits while you are experimenting with CI variables.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Git push options for Merge Requests. You can configure the Merge Request behavior when pushing your changes. For example: you want to create a new merge request, and target a branch named &lt;code&gt;my-target-branch&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;git push -o merge_request.create -o merge_request.target=my-target-branch
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;GitLab CI&#x2F;CD jobs produce artifacts. These artifacts can then be accessed via the GitLab API. These artifacts also have an expiry date that you specify in the job config itself&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;build_and_push_image&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;stage&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;build
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;allow_failure&lt;&#x2F;span&gt;&lt;span&gt;: false
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;	- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;bash build_image.sh
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;artifacts&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;paths&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;	- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;env.file
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;expire_in&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;1 week
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Mandating that a review is required for an MR to be merged is a GitLab premium feature. You can also setup a check that requires approval before merging code that causes test coverage to decline.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;This is how we can setup IaC with k8s, GitLab CI&#x2F;CD, AWS, and helm:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Consider that we have multiple GitLab repos to host application code (usually the code of each microservice) and one GitLab repo for maintaining all the helm charts for their corresponding deployments to k8s (Let&#x27;s call this state repo)&lt;&#x2F;li&gt;
&lt;li&gt;A developer merges an MR to the staging branch on their application repo.&lt;&#x2F;li&gt;
&lt;li&gt;As part of the CI steps (scripts to run tests and lint checks), a docker image is created and is pushed to AWS ECR if the tests run successfully.&lt;&#x2F;li&gt;
&lt;li&gt;Usually, even these CI steps are imported from a common GitLab repo that hosts all the common GitLab job configurations (let&#x27;s call this CI-CD GitLab repo).&lt;&#x2F;li&gt;
&lt;li&gt;Then there will be a job on the application GitLab repo to update the docker image tag in the values.yml file (or the k8s cluster-specific overrides file staging.yml) of that service in the state repo via an MR.&lt;&#x2F;li&gt;
&lt;li&gt;Once the MR is merged, there will be a job on the state repo which shall run only when there is a change to the staging.yml in the overrides folder of that service&#x27;s helm chart. This job will run the script to apply the helm changes in that cluster.&lt;&#x2F;li&gt;
&lt;li&gt;A new version of the application is now rolled out to the staging cluster. Likewise for other clusters as well.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;til&#x2F;gitlab-ci-cd-2&#x2F;20230315_192634.jpg&quot; alt=&quot;image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Sync data between two k8s clusters</title>
        <published>2023-02-19T00:00:00+00:00</published>
        <updated>2023-02-19T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://vinay.lol/til/copy-data-between-databases/" type="text/html"/>
        <id>https://vinay.lol/til/copy-data-between-databases/</id>
        
        <content type="html">&lt;p&gt;&lt;strong&gt;Task:&lt;&#x2F;strong&gt; You have to sync data from a table in a DB from one k8s cluster to a table (of the same schema) in a DB from another k8s cluster.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Usecase:&lt;&#x2F;strong&gt; When you want to have the pre-production environment (commonly known as the Staging environment) have real production data so that you can test your code&#x2F;config changes in the pre-production environment before actually pushing your changes to production.&lt;&#x2F;p&gt;
&lt;p&gt;Why is it important? Sometimes unit tests are not enough as the production data usually has some quirks that we fail to expect&#x2F;guess when mocking the dependencies.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;levels-of-sophistication&quot;&gt;Levels of Sophistication&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;level-1&quot;&gt;Level 1&lt;&#x2F;h3&gt;
&lt;p&gt;Let&#x27;s say you have production DB SSH tunneled to your local machine on 5433 port and Pre-production DB is SSH tunneled on 5434 port on your local machine.&lt;&#x2F;p&gt;
&lt;p&gt;The below command will export the data from a table called &lt;code&gt;flows&lt;&#x2F;code&gt; in a postgres DB running on 5433 port as insert statements into a SQL file.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;pg_dump --column-inserts --data-only -h localhost -p 5433 -U postgres -d db_name -t flows &amp;gt;  flows.sql
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can then load this data into the pre-production DB running at 5434 with the below command&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;psql -h localhost -U psotgres -p 5434 -d db_name -f flows.sql
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The dump file looks something like this&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#888888;&quot;&gt;--
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;-- PostgreSQL database dump
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;--
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;-- Dumped from database version 12.11
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;-- Dumped by pg_dump version 12.9 (Ubuntu 12.9-0ubuntu0.20.04.1)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;SET statement_timeout = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;SET lock_timeout = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;SET idle_in_transaction_session_timeout = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;SET client_encoding = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;UTF8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;SET standard_conforming_strings = on;
&lt;&#x2F;span&gt;&lt;span&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;pg_catalog&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;set_config&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;search_path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, false);
&lt;&#x2F;span&gt;&lt;span&gt;SET check_function_bodies = false;
&lt;&#x2F;span&gt;&lt;span&gt;SET xmloption = content;
&lt;&#x2F;span&gt;&lt;span&gt;SET client_min_messages = warning;
&lt;&#x2F;span&gt;&lt;span&gt;SET row_security = off;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;--
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;-- Data for Name: flows; Type: TABLE DATA; Schema: public; Owner: postgres
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;--
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;INSERT INTO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;flows&lt;&#x2F;span&gt;&lt;span&gt; (column1, column2, column3) VALUES (value11, value12, value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;13&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;INSERT INTO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;flows&lt;&#x2F;span&gt;&lt;span&gt; (column1, column2, column3) VALUES (value21, value22, value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;23&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;level-2&quot;&gt;Level 2&lt;&#x2F;h3&gt;
&lt;p&gt;The above can be very slow if you have a large number of datapoints (even 1000s). You can instead use:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;pg_dump --data-only -h localhost -p 5433 -U postgres -d db_name -t flows &amp;gt;  flows.sql
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can also dump data from multiple tables like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;pg_dump --data-only -h localhost -p 5433 -U postgres -d db_name -t flows -t clients &amp;gt;  flows_clients.sql
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You will get all the data in a single copy command. This is much much faster. The exported data will look like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#888888;&quot;&gt;--
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;-- PostgreSQL database dump
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;--
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;-- Dumped from database version 12.11
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;-- Dumped by pg_dump version 14.6 (Ubuntu 14.6-0ubuntu0.22.04.1)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;SET statement_timeout = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;SET lock_timeout = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;SET idle_in_transaction_session_timeout = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;SET client_encoding = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;UTF8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;SET standard_conforming_strings = on;
&lt;&#x2F;span&gt;&lt;span&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;pg_catalog&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;set_config&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;search_path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, false);
&lt;&#x2F;span&gt;&lt;span&gt;SET check_function_bodies = false;
&lt;&#x2F;span&gt;&lt;span&gt;SET xmloption = content;
&lt;&#x2F;span&gt;&lt;span&gt;SET client_min_messages = warning;
&lt;&#x2F;span&gt;&lt;span&gt;SET row_security = off;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;--
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;-- Data for Name: clients; Type: TABLE DATA; Schema: public; Owner: postgres
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;--
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;COPY &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;clients&lt;&#x2F;span&gt;&lt;span&gt; (column1, column2, column3) FROM stdin;
&lt;&#x2F;span&gt;&lt;span&gt;value11   value12   value13
&lt;&#x2F;span&gt;&lt;span&gt;value21   value22   value23
&lt;&#x2F;span&gt;&lt;span&gt;\.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;--
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;-- Data for Name: flows; Type: TABLE DATA; Schema: public; Owner: postgres
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;--
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;COPY &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;flows&lt;&#x2F;span&gt;&lt;span&gt; (column1, column2, column3) FROM stdin;
&lt;&#x2F;span&gt;&lt;span&gt;value11   value12   value13
&lt;&#x2F;span&gt;&lt;span&gt;value21   value22   value23
&lt;&#x2F;span&gt;&lt;span&gt;\.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;--
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;-- Name: clientz_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;--
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;pg_catalog&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;setval&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;public.clientz_id_seq&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;257&lt;&#x2F;span&gt;&lt;span&gt;, true);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;--
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;-- Name: flowz_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;--
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;pg_catalog&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;setval&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;public.flowz_id_seq&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1478&lt;&#x2F;span&gt;&lt;span&gt;, true);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;--
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;-- PostgreSQL database dump complete
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;--
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;level-3&quot;&gt;Level 3&lt;&#x2F;h3&gt;
&lt;p&gt;It is usually a good idea to try this on a dummy table first. On the DB into which you are trying to dump the data, you can create a dummy &lt;code&gt;flows&lt;&#x2F;code&gt; table from the actual &lt;code&gt;flows&lt;&#x2F;code&gt; table like this.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;CREATE TABLE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;dupe_flows&lt;&#x2F;span&gt;&lt;span&gt; (LIKE flows INCLUDING ALL);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and then &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;pg_dump --data-only -h localhost -p 5433 -U postgres -d db_name -t flows | sed &amp;#39;s&#x2F;public.flows&#x2F;public.dupe_flows&#x2F;g&amp;#39; &amp;gt; flows.sql
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It is changing the name of the table from &amp;quot;public.flows&amp;quot; to &amp;quot;public.dupe_flows&amp;quot; in the SQL file. Please be vary that it can have unintended affects if your table name is a substring of some other string. Use it with caution.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;level-4&quot;&gt;Level 4&lt;&#x2F;h3&gt;
&lt;p&gt;If you already have a IaC (Infrastructure as Code) setup, it is likely that you don&#x27;t need the schema to be created again. You just need to have the data synced.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;level-5&quot;&gt;Level 5&lt;&#x2F;h3&gt;
&lt;p&gt;Sometimes you would want to apply filters on the data from a table. &lt;code&gt;pg_dump&lt;&#x2F;code&gt; doesn&#x27;t seem to have this feature. You can instead use:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;psql -h localhost -p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;5433 &lt;&#x2F;span&gt;&lt;span&gt;-U postgres -d db_name -c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;\copy (select * from flows where flow_id in (&amp;#39;1&amp;#39;, &amp;#39;2&amp;#39;, &amp;#39;3&amp;#39;) TO flow_dump.csv delimiter &amp;#39;,&amp;#39; csv header;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can then load the data like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;psql -h localhost -U postgres -p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;5434 &lt;&#x2F;span&gt;&lt;span&gt;-d db_name -c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;\copy flows from &amp;#39;flow_dump.csv&amp;#39; delimeter &amp;#39;,&amp;#39; csv header;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;level-6&quot;&gt;Level 6&lt;&#x2F;h3&gt;
&lt;p&gt;The above assumes that the order of the columns between the two tables is the same. In case, it is not, you can specify the order of the columns when loading the data into pre-production DB like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;psql -h localhost -U postgres -p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;5434 &lt;&#x2F;span&gt;&lt;span&gt;-d db_name -c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;\copy flows (column1, column3, column2) from &amp;#39;flow_dump.csv&amp;#39; delimiter &amp;#39;,&amp;#39; csv header;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note: You will most likely run into issues of timing out if the amount of data you are trying to dump is huge. However, it is not a good idea to dump all the data from production. It would almost never be necessary.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;putting-it-together&quot;&gt;Putting it together&lt;&#x2F;h1&gt;
&lt;p&gt;We have the data dumping and loading sorted. How do we stitch them together and how do we run them on a daily basis?&lt;&#x2F;p&gt;
&lt;p&gt;For the teams that use k8s, you can setup the dumping script as a cron job in the production k8s and configure it to dump the data into a storage location like AWS S3 (or any other storage location to which both k8s clusters have access) and you can setup the loading script to load the data from AWS S3.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Platform Engineering</title>
        <published>2023-01-05T00:00:00+00:00</published>
        <updated>2023-01-05T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://vinay.lol/til/platform-engineering/" type="text/html"/>
        <id>https://vinay.lol/til/platform-engineering/</id>
        
        <content type="html">&lt;p&gt;Over the last few months, I started working as an ML Platform Engineer. I have, since then, started learning about what Platform Engineering(PE) is about. The following is a loose set of points that I have been gathering about PE.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;what-is-a-platform&quot;&gt;What is a Platform?&lt;&#x2F;h1&gt;
&lt;p&gt;It is a set of tools or systems that you can use to build more things on top of.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;division-of-platform-teams&quot;&gt;Division of Platform teams&lt;&#x2F;h2&gt;
&lt;p&gt;By the above definition of a Platform, the scope of Engineering is huge. Some companies typically break it down into three teams.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;SRE team&lt;&#x2F;strong&gt; - focuses on monitoring, observability, and reliability of systems.&lt;br &#x2F;&gt;
Tasks like:&lt;br &#x2F;&gt;
a. Setting up Monitoring platforms (Prometheus, Grafana), Messaging platforms (Kafka, Rabbit MQ, Amazon SQS), and Data platforms (Hadoop, Apache Spark), etc. &lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;0uuOJ1gzcyE?t=101&quot;&gt;Reference&lt;&#x2F;a&gt;&lt;br &#x2F;&gt;
b. Working on reaching SLAs, SLOs, and SLIs. &lt;a href=&quot;https:&#x2F;&#x2F;cloud.google.com&#x2F;blog&#x2F;products&#x2F;devops-sre&#x2F;sre-fundamentals-slis-slas-and-slos&quot;&gt;Reference&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;DevX team&lt;&#x2F;strong&gt; - Providing developers with the tools, services, and automated workflows they need to do their job.&lt;br &#x2F;&gt;
Tasks like:&lt;br &#x2F;&gt;
a. Creating alerts, and providing a framework for building products.&lt;br &#x2F;&gt;
b. Creating pipelines, documentation, and setting up standards across the company to help application development teams move quicker.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Cloud Engineering team&lt;&#x2F;strong&gt; - They deal with the nuts and bolts of cloud infrastructure.&lt;br &#x2F;&gt;
Tasks Like:&lt;br &#x2F;&gt;
a. Setting up a VPC and configuring cloud (example: AWS) resources (compute instances, Kubernetes clusters). Cost management, billing, security, etc.&lt;br &#x2F;&gt;
b. Policies, Managing compliance, and Cost Monitoring.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;In the company I work for, we have a single Platform team that takes care of SRE &amp;amp; DevX. An Infrastructure team that takes care of Cloud Engineering.&lt;&#x2F;p&gt;
&lt;p&gt;Since our end products are ML-powered, within the Platform team, we have further divisions of Engineering Platform (focuses on improving the DevX for core services and SRE responsibilities) and Machine Learning Platform (focuses on improving the ML model development lifecycles).&lt;&#x2F;p&gt;
&lt;h1 id=&quot;iaas-v-s-paas-v-s-saas&quot;&gt;IaaS v&#x2F;s PaaS v&#x2F;s SaaS&lt;&#x2F;h1&gt;
&lt;p&gt;Let&#x27;s take a Cookie factory analogy.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Infra team&lt;&#x2F;strong&gt; sets up the building blocks of the factory. motors, cogs, machines, belts, etc.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Platform team&lt;&#x2F;strong&gt; uses the building blocks made by the Infra team to create things like conveyer belts, packaging machines, etc.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Application developers&lt;&#x2F;strong&gt; use the tools developed by the Platform team to convert the cookie (that they baked) into a selling product that will reach the customers.&lt;&#x2F;p&gt;
&lt;p&gt;Examples of IaaS: Amazon Web Services, Google Cloud Platform, and Microsoft Azure&lt;br &#x2F;&gt;
Examples of PaaS: Heroku and Railway&lt;br &#x2F;&gt;
Examples of SaaS: Dukaan (It lets you create, customize, and launch (service) your website (software) to sell your products)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;difference-between-an-sde-and-a-platform-engineer&quot;&gt;Difference between an SDE and a Platform Engineer?&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;An SDE writes code for applications that are used by your clients or customers. They are satisfying the needs of the customer.&lt;&#x2F;li&gt;
&lt;li&gt;A Platform Engineer writes code for infrastructure to the needs of the application developers (SDE). SDEs are customers of Platform Engineers.&lt;&#x2F;li&gt;
&lt;li&gt;One of the responsibilities of a PE is to provide automation of recurring tasks of an SDE thereby reducing the go-to-market time.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;difference-between-ml-engineers-and-ml-platform-engineers&quot;&gt;Difference between ML Engineers and ML Platform Engineers?&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;Platform MLEs should help in triggering performance drop alerts so that Task MLEs can act on them.&lt;&#x2F;li&gt;
&lt;li&gt;They assist with Monitoring and Observability too. Platform MLEs also take care of creating features.&lt;&#x2F;li&gt;
&lt;li&gt;Platform MLEs do not get to change anything around the model, its inputs, or outputs— but they’re responsible for identifying when and how any of them are broken.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;For more information check this amazing &lt;a href=&quot;https:&#x2F;&#x2F;www.shreya-shankar.com&#x2F;phd-year-one&#x2F;&quot;&gt;reference&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;misc&quot;&gt;Misc&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;Who should write Dockerfile?&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;If Devs write it, DevOps will have surprise errors from production. Devs will seek help from DevOps. Devs usually do not focus on security or any other policies.&lt;&#x2F;li&gt;
&lt;li&gt;If DevOps write it, Devs will complain that they have to wait and it causes delays. Imagine having to wait on a DevOps person just to add an ENV variable.&lt;&#x2F;li&gt;
&lt;li&gt;A hybrid approach is to have the Devs provide the list files, environment variables, and dependencies they need and DevOps builds another Dockerfile on top of it to have security.&lt;&#x2F;li&gt;
&lt;li&gt;These days Devs are expected to have Docker knowledge. However, for security and other nitty-gritty of Docker, the involvement of SRE is sometimes required. &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;63043718&#x2F;who-should-write-the-dockerfile-sre-or-developer&quot;&gt;Reference1&lt;&#x2F;a&gt; and 
&lt;a href=&quot;https:&#x2F;&#x2F;devops.stackexchange.com&#x2F;questions&#x2F;12042&#x2F;who-should-write-docker-files&quot;&gt;Reference2&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;resources&quot;&gt;Resources&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;@PlatformEngineering&quot;&gt;Platform Engineering Youtube channel&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;platformengineering.org&#x2F;blog&quot;&gt;Platform Engineering Blog&lt;&#x2F;a&gt; - Produces quality content. Highly recommended to check their playlists&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;platformengineering.org&#x2F;blog&#x2F;what-is-platform-engineering&quot;&gt;What is Platform Engineering&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Batch processing long running SQL queries</title>
        <published>2022-11-17T00:00:00+00:00</published>
        <updated>2022-11-17T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://vinay.lol/til/batch-processing-sql-queries/" type="text/html"/>
        <id>https://vinay.lol/til/batch-processing-sql-queries/</id>
        
        <content type="html">&lt;p&gt;There is often a need to run a SQL query to save raw data on the disk which can further be used for some kind of analysis. The most common problems we face are &lt;a href=&quot;&#x2F;til&#x2F;mvcc-timeout-postgres&#x2F;&quot;&gt;timeout issues&lt;&#x2F;a&gt; (either statement timeout or mvcc timeout when reading from a read replica).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;The following shows how you can process a query in batches:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Imagine there is a table called the &lt;code&gt;game&lt;&#x2F;code&gt; with columns like: &lt;code&gt;id&lt;&#x2F;code&gt;, &lt;code&gt;name&lt;&#x2F;code&gt;, &lt;code&gt;place&lt;&#x2F;code&gt;, &lt;code&gt;animal&lt;&#x2F;code&gt;, and &lt;code&gt;thing&lt;&#x2F;code&gt;. Let&#x27;s say, the data present in the &lt;code&gt;name&lt;&#x2F;code&gt;, &lt;code&gt;place&lt;&#x2F;code&gt;, &lt;code&gt;animal&lt;&#x2F;code&gt;, and &lt;code&gt;thing&lt;&#x2F;code&gt; columns is too big which is causing your query unable to be executed at once. Your &lt;code&gt;id&lt;&#x2F;code&gt; column is a primary key and is also indexed.&lt;&#x2F;p&gt;
&lt;p&gt;In such a case, this is how you can download all the data in batches:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# First get all the ids of the row you want to fetch
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;psycopg2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;pg
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;connect&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;host&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;port&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;db_name
&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;pg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;connect&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;host&lt;&#x2F;span&gt;&lt;span&gt;=host, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;port&lt;&#x2F;span&gt;&lt;span&gt;=port, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;=user, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;=password, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;dbname&lt;&#x2F;span&gt;&lt;span&gt;=db_name
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;get_ids&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;params&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Tuple[int]:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;#  params = {&amp;quot;name&amp;quot;: (&amp;quot;abc&amp;quot;, &amp;quot;dfe&amp;quot;), &amp;quot;place&amp;quot;: (&amp;quot;uvw&amp;quot;, &amp;quot;xyz&amp;quot;)}
&lt;&#x2F;span&gt;&lt;span&gt;    query = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;        select id from game
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;        where 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;            name in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;%(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;)s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;            and palce in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;%(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;place&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;)s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    ids_ = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;connect&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;conn:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span&gt;conn.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;cursor&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;cursor:
&lt;&#x2F;span&gt;&lt;span&gt;            cursor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(query, {**params})
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;tuple&lt;&#x2F;span&gt;&lt;span&gt;(id_[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;id_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;cursor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;fetchall&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Since we are just fetching the &lt;code&gt;id&lt;&#x2F;code&gt; column (which is also indexed), this query will (hopefully) not run into timeout issues. If it is still running into timeout issues, you can consider adding extra dimensions to help you filter out data faster.&lt;&#x2F;p&gt;
&lt;p&gt;Now that we have fetched all the ids of the rows we are interested in, we can fetch the row data in batches of these ids&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;download_data&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;    query = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;select * from game where id in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;%(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7697d6;&quot;&gt;)s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    ids = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;get_ids&lt;&#x2F;span&gt;&lt;span&gt;(params) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# function we defined above
&lt;&#x2F;span&gt;&lt;span&gt;    num_ids = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(ids)
&lt;&#x2F;span&gt;&lt;span&gt;    batch_size = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1000
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    num_batches = (
&lt;&#x2F;span&gt;&lt;span&gt;        num_ids &#x2F;&#x2F; batch_size
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;num_ids % batch_size == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;num_ids &#x2F;&#x2F; batch_size + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;    pandas_header = True
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;tqdm&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;total&lt;&#x2F;span&gt;&lt;span&gt;=num_batches, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;desc&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Downloading the dataset.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;pbar:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;i &amp;lt; num_ids:
&lt;&#x2F;span&gt;&lt;span&gt;            batch = ids[i : i + batch_size]
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;connect&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;conn:
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span&gt;conn.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;cursor&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;cursor_factory&lt;&#x2F;span&gt;&lt;span&gt;=NamedTupleCursor) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;cursor:
&lt;&#x2F;span&gt;&lt;span&gt;                        cursor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(query, {id: batch})
&lt;&#x2F;span&gt;&lt;span&gt;                        result_set = cursor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;fetchall&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;use_pandas:
&lt;&#x2F;span&gt;&lt;span&gt;                            df_chunk = pd.DataFrame.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;from_records&lt;&#x2F;span&gt;&lt;span&gt;(result_set, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;columns&lt;&#x2F;span&gt;&lt;span&gt;=[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;place&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;animal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;thing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;                            df_chunk.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;to_csv&lt;&#x2F;span&gt;&lt;span&gt;(file_name, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;header&lt;&#x2F;span&gt;&lt;span&gt;=pandas_header, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span&gt;=False, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;mode&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                            pandas_header = False
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;yield from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;process_data&lt;&#x2F;span&gt;&lt;span&gt;(result_set) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# if you want to process the data further before saving it to the disk
&lt;&#x2F;span&gt;&lt;span&gt;                        pbar.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                i += batch_size
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;except &lt;&#x2F;span&gt;&lt;span&gt;(SerializationFailure, OperationalError) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;e:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# retry this batch incase there is a timeout
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# if this error is occuring too many times, consider reducing the batch size
&lt;&#x2F;span&gt;&lt;span&gt;                logger.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;(e)
&lt;&#x2F;span&gt;&lt;span&gt;                logger.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;This error is common if you are requesting a large dataset. We will retry the batch in a while.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                time.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;0.2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;data = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;download_data&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;pandas-alternative&quot;&gt;Pandas Alternative&lt;&#x2F;h3&gt;
&lt;p&gt;Pandas also supports reading the result from a SQL query in chunks directly as pandas data frames. If you know the optimal batch size, this is how you can proceed:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;sqlalchemy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;create_engine
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;get_engine&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;host&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;port&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;db_name
&lt;&#x2F;span&gt;&lt;span&gt;    ):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;create_engine&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;postgresql:&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;{user}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;{password}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span&gt;{host}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;{port}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;{db_name}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# return sql alchemy engine instead of the psycopgy engine
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fad07a;&quot;&gt;download_data&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;db_name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;query_file_name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;params&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;output_file_name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;processing_fn&lt;&#x2F;span&gt;&lt;span&gt;=None
&lt;&#x2F;span&gt;&lt;span&gt;    ):
&lt;&#x2F;span&gt;&lt;span&gt;        pandas_header = True
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;get_engine&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;db_name&lt;&#x2F;span&gt;&lt;span&gt;=db_name).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;connect&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;execution_options&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;stream_results&lt;&#x2F;span&gt;&lt;span&gt;=True
&lt;&#x2F;span&gt;&lt;span&gt;        ) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;conn:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# If we need to modify something manually in the same connection session, we can do it here
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# example: conn.execute(&amp;quot;SELECT statement_timeout = 0;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;df_chunk &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;pd.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;read_sql_query&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;get_query&lt;&#x2F;span&gt;&lt;span&gt;(query_file_name), conn, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;params&lt;&#x2F;span&gt;&lt;span&gt;=params, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;chunksize&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cf6a4c;&quot;&gt;1000
&lt;&#x2F;span&gt;&lt;span&gt;            ):
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;processing_fn:
&lt;&#x2F;span&gt;&lt;span&gt;                    df_chunk = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;processing_fn&lt;&#x2F;span&gt;&lt;span&gt;(df_chunk) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# apply any processing on the df_chunk 
&lt;&#x2F;span&gt;&lt;span&gt;                df_chunk = df_chunk.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;applymap&lt;&#x2F;span&gt;&lt;span&gt;(serialize) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# to properly format the json values
&lt;&#x2F;span&gt;&lt;span&gt;                df_chunk.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;to_csv&lt;&#x2F;span&gt;&lt;span&gt;(output_file_name, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;header&lt;&#x2F;span&gt;&lt;span&gt;=pandas_header, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span&gt;=False, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;mode&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                pandas_header = False
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;download_data&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;resource&quot;&gt;Resource&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pythonspeed.com&#x2F;articles&#x2F;pandas-sql-chunking&#x2F;&quot;&gt;Pandas SQL Chunking&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;61040570&#x2F;django-using-bulk-update-to-update-all-records&quot;&gt;Django bulk_update to update all records&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;&#x2F;strong&gt; These are rough snippets. almost like pseudo-code. This is just to communicate the idea across. Please ensure that you structure this properly and provide the right params when you try to use this code snippet :)&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Software Deployment Stratagies</title>
        <published>2022-10-17T00:00:00+00:00</published>
        <updated>2022-10-17T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://vinay.lol/til/deployment-stratagies/" type="text/html"/>
        <id>https://vinay.lol/til/deployment-stratagies/</id>
        
        <content type="html">&lt;ol&gt;
&lt;li&gt;Blue Green deployment
&lt;ol&gt;
&lt;li&gt;We have an existent environment where our service is working well (green environment)&lt;&#x2F;li&gt;
&lt;li&gt;We replicate the existing (green) environment into another (blue) environment.&lt;&#x2F;li&gt;
&lt;li&gt;We release the new version of our model into the blue environment&lt;&#x2F;li&gt;
&lt;li&gt;Edit the reverse proxy to start sending requests to our new model version in the blue environment.&lt;&#x2F;li&gt;
&lt;li&gt;Monitor for errors. If it works well, we replace the green environment with the blue environment.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Canary deployment
&lt;ol&gt;
&lt;li&gt;The fact that regardless of the immense level of testing you do in lower environments you will still have some bugs in production&lt;&#x2F;li&gt;
&lt;li&gt;Deployment is done in phases. At each phase, we monitor for errors. If we find errors, moving to the next phase is aborted.
&lt;ol&gt;
&lt;li&gt;Phase 1: new version of the model receives 10% of the load&lt;&#x2F;li&gt;
&lt;li&gt;Phase 2: new version of the model receives 50% of the load&lt;&#x2F;li&gt;
&lt;li&gt;Phase 3: new version of the model receives 100% of the load&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Canary releases let you test the waters before pulling the trigger on a full release.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;A&#x2F;B deployment
&lt;ol&gt;
&lt;li&gt;We have two versions of a model which we are sure that there are no unresolved bugs&lt;&#x2F;li&gt;
&lt;li&gt;But we want to collect feedback on which version is more likable to the users (or) is more beneficial to us.&lt;&#x2F;li&gt;
&lt;li&gt;We usually split the traffic by 50:50&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;&#x2F;strong&gt; Since both Canary and A&#x2F;B deployment stratagies involves the users experiencing different versions of out app&#x2F;model, they are often confused. However, they can be differentiated by the intention behind adoptiong the stratagies.&lt;&#x2F;p&gt;
&lt;p&gt;We employ Canary when we are not sure how our new version works in comparison to the existing version of our app&#x2F;model. Whereas, when we know that both existing and older versions work perfectly fine but don&#x27;t know which one is liked by the users, we employ A&#x2F;B testing.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Notes on ArgoCD</title>
        <published>2022-10-04T00:00:00+00:00</published>
        <updated>2022-10-04T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://vinay.lol/til/argo-cd/" type="text/html"/>
        <id>https://vinay.lol/til/argo-cd/</id>
        
        <content type="html">&lt;p&gt;The below is the notes I&#x27;ve taken while understanding what argoCD is about. I will refer to CD providers like GitLab and Jenkins as alternatives.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;With alternatives, we would need to setup tools like AWS CLI, kubectl, helm, etc inside each CD job of each project.&lt;br &#x2F;&gt;
a. We will end up providing k8s access to all the different client code bases. This can be a security challenge&lt;br &#x2F;&gt;
b. These tools get installed and need to be authenticated for every new release.&lt;&#x2F;li&gt;
&lt;li&gt;The alternatives won&#x27;t give us the deployment status of our apps once the &lt;code&gt;kubectl apply&lt;&#x2F;code&gt; is done. It is possible that we have a successful pipeline run (kubectl apply is executed ) but a failed deployment (pods failing to startup).&lt;br &#x2F;&gt;
a. Though we can have liveness and startup checks to let us know if deployment failed, argoCD gives us that capability by default.&lt;&#x2F;li&gt;
&lt;li&gt;argoCd also encourages that we follow the principles of GitOps which ensures we visbility, security, speed, and single source of truth.&lt;&#x2F;li&gt;
&lt;li&gt;Since argoCD is deployed within k8s cluster itself:&lt;br &#x2F;&gt;
a. We don&#x27;t need to have cluster credentials outside of k8s&lt;br &#x2F;&gt;
b. no need to give external cluster access to non human users&lt;br &#x2F;&gt;
c. argoCd is able to do this as it is deployed within a k8s cluster itself. It is an extension to k8s.&lt;&#x2F;li&gt;
&lt;li&gt;With argoCD we get an UI to visualise deployment status of any app.&lt;&#x2F;li&gt;
&lt;li&gt;Manual rollbacks are also super simple. We will have the history of all the previous version of deployment. We can select a version and click on rollback.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=MeU5_k9ssrs&quot;&gt;ArgoCD Tutorial for Beginners&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>GitLab CI&#x2F;CD basics</title>
        <published>2022-10-02T00:00:00+00:00</published>
        <updated>2022-10-02T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://vinay.lol/til/gitlab-ci-cd/" type="text/html"/>
        <id>https://vinay.lol/til/gitlab-ci-cd/</id>
        
        <content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;GitLab runs all CI&#x2F;CD jobs within a Docker container. Ruby Docker image is
used as default&lt;br &#x2F;&gt;
a. We can overwrite this default image by specifiying a image name globally (in
the &lt;code&gt;.gitlab-ci.yml&lt;&#x2F;code&gt; file).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;&amp;lt;default_image&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;test_project&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;pytest
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;b. It is also allowed to use different docker images for different jobs.
Each job will can have a key called &lt;code&gt;image&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;&amp;lt;custom_image&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# test python backend with pytest. So python is needed
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;test_backend&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;python:3.9-slim-buster
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;before_script&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;pip install -r requirements.txt
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;pytest
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# test js frontend with npm. So node is needed
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;test_frontend&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;node:alpine
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;before_script&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;npm install
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;npm test
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# test the integration. Some custom environment is needed
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;test_integration&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;make test &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# run within contianer of &amp;lt;custom_image&amp;gt; container
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;We can import jobs from other files by the URL of GitLab file like below&lt;br &#x2F;&gt;
&lt;code&gt;lint.yml&lt;&#x2F;code&gt; (&lt;code&gt;https:&#x2F;&#x2F;gitlab.com&#x2F;&amp;lt;org-name&amp;gt;&#x2F;&amp;lt;repo-name&amp;gt;&#x2F;-&#x2F;blob&#x2F;master&#x2F;lint.yml&lt;&#x2F;code&gt;):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;lint_python&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;stage&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;lint
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;&amp;lt;image_name&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;services&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;postgres:12.4-alpine
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;variables&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;POSTGRES_DB&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;&amp;lt;db_name&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;POSTGRES_USER&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;&amp;lt;user_name&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;POSTGRES_PASSWORD&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;&amp;lt;password&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;before_script&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;pip install --upgrade pip
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;pip3 install tox flake8
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;flake8 --statistics
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;.gitlab-ci.yml&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# refer to the above lint.yml
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;include&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;project&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;&amp;lt;org-name&amp;gt;&#x2F;&amp;lt;repo-name&amp;gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;master
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;lint.yml&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# Specify stages
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;stages&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;lint
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;We can override the imported Jobs like below:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;.gitlab-ci.yml&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# refer to the above lint.yml
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;include&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;project&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;&amp;lt;org-name&amp;gt;&#x2F;&amp;lt;repo-name&amp;gt;&#x2F;ci-cd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;master
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;&#x2F;templates&#x2F;jobs&#x2F;lint.yml&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# Specify stages
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;stages&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;lint
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# Overwrite imported lint_python job from lint.yml
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;lint_python&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;allow_failure&lt;&#x2F;span&gt;&lt;span&gt;: true
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;pip3 install black
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;black .
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Since all &lt;code&gt;Jobs&lt;&#x2F;code&gt; run inside containers, when we need to execute docker
commands (within a build &lt;code&gt;Job&lt;&#x2F;code&gt; for example), we will need docker to be available inside the Job&#x27;s container. So we have to use &lt;a href=&quot;https:&#x2F;&#x2F;docs.gitlab.com&#x2F;ee&#x2F;ci&#x2F;docker&#x2F;using_docker_build.html&quot;&gt;docker in
docker&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;a. A Service container is an additioanl container that starts at the same time as the &lt;code&gt;Job&lt;&#x2F;code&gt; container. Most common usecase is to run a database container.&lt;br &#x2F;&gt;
b. The &lt;code&gt;services&lt;&#x2F;code&gt; attribute will make sure that the Service container and the Job container will be on the same network and can talk to each other.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;build_image&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;stage&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;build
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;docker:20.10.16 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# for making the docker client available within Job&amp;#39;s docker container
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;services&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;docker:20.10.16-dind &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# for making the docker daemon available within Job&amp;#39;s docker container
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;entrypoint&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;dockerd-entrypoint.sh&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;--tls=false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;before_script&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;docker login -u $REGISTRY_USER -p $REGISTRY_PASS
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;docker build -t $IMAGE_NAME:$IMAGE_TAG .
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;docker push $IMAGE_NAME:$IMAGE_TAG
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;PS:&lt;&#x2F;strong&gt; With &lt;code&gt;dind&lt;&#x2F;code&gt; as service, we need to configure TLS, else we can disable it like above. &lt;a href=&quot;https:&#x2F;&#x2F;about.gitlab.com&#x2F;blog&#x2F;2019&#x2F;07&#x2F;31&#x2F;docker-in-docker-with-docker-19-dot-03&#x2F;&quot;&gt;Reference&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Add a (&lt;code&gt;.&lt;&#x2F;code&gt;) in front of a job name and it will be skipped from execution. It
is like commenting.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;.test_experiment&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#888888;&quot;&gt;# skipped from execution
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;make test
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;test_production&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ffb964;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;pytest
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Apart from secret variables, we can add custom variables in the
&lt;code&gt;.gitlab-ci.yml&lt;&#x2F;code&gt; file to avoid repitition. They can either be defined per
&lt;code&gt;Job&lt;&#x2F;code&gt; or &lt;code&gt;globally&lt;&#x2F;code&gt;. Just like secret variables, they are also referred with
the help of &lt;code&gt;$variable&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;References: &lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=qP8kir2GUgo&quot;&gt;GitLab CI&#x2F;CD course by Tech with Nana&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Characteristics of Materiliazed Views</title>
        <published>2022-09-29T00:00:00+00:00</published>
        <updated>2023-11-02T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://vinay.lol/til/characteristics-of-materiliazed-views/" type="text/html"/>
        <id>https://vinay.lol/til/characteristics-of-materiliazed-views/</id>
        
        <content type="html">&lt;p&gt;A Materiliazed View (MV) is a result of an editable SQL query (on an exisitng table) stored on disk. We can execute SQL queries on a MV to get information faster.&lt;&#x2F;p&gt;
&lt;p&gt;You can list all the MVs present along with their defining queries on PostgreSQL like &lt;a href=&quot;https:&#x2F;&#x2F;dataedo.com&#x2F;kb&#x2F;query&#x2F;postgresql&#x2F;list-materialized-views&quot;&gt;this&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;select schemaname as schema_name,
&lt;&#x2F;span&gt;&lt;span&gt;       matviewname as view_name,
&lt;&#x2F;span&gt;&lt;span&gt;       matviewowner as owner,
&lt;&#x2F;span&gt;&lt;span&gt;       ispopulated as is_populated,
&lt;&#x2F;span&gt;&lt;span&gt;       definition
&lt;&#x2F;span&gt;&lt;span&gt;from pg_matviews
&lt;&#x2F;span&gt;&lt;span&gt;order by schema_name,
&lt;&#x2F;span&gt;&lt;span&gt;         view_name;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;characteristics&quot;&gt;Characteristics:&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;They are best used when a complex query (joins on multiple tables) has to be
executed frequently on not so frequently changing data. Refreshing a MV every time (or every 5 minutes) defeats the purpose of using a MV.
&lt;ol&gt;
&lt;li&gt;In contrast, a View is used when a simple query (joins on 1 or 2 tables) has to be executed frequently on not so frequently changing data. A View is just a named query and the query is executed every time the View is called. The result you get is from the actual tables. &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;43053443&#x2F;10524266&quot;&gt;reference&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;They are refreshable. Meaning, the (complex) query is executed again on the
underlying tables to reflect the updates.&lt;&#x2F;li&gt;
&lt;li&gt;You can create an MV on an exisitng MV.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;limitations&quot;&gt;Limitations:&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;Refreshing a MV would mean we are polling the underlying DB&#x2F;tables for every period of time. Polling adds a load onto the underlying (master) DB. Lesser the refresh period, more the load on the DB.&lt;&#x2F;li&gt;
&lt;li&gt;When we refresh a MV, it would block all select queries on the MV during that period. While there is an option to do the refresh concurrently (does not block queries), it would put additional load on our machines.&lt;&#x2F;li&gt;
&lt;li&gt;If there is an ORDER BY clause in the materialized view&#x27;s defining query, the original contents of the materialized view will be ordered that way, but &lt;code&gt;REFRESH MATERIALIZED VIEW&lt;&#x2F;code&gt; does not guarantee to preserve that ordering.&lt;&#x2F;li&gt;
&lt;li&gt;You cannot use &lt;style&gt;
    .code-highlight {
        display: inline;
        color: #02AB6D;
        background-color: rgba(110, 116, 129, 0.4);
        padding: 1.5px;
        margin-left: 1px;
        margin-right: 2px;
        border-radius: 6px;
    }
&lt;&#x2F;style&gt;
&lt;div class=&quot;code-highlight&quot;&gt;
    JOIN
&lt;&#x2F;div&gt; between two MVs or between a MV and a table.&lt;&#x2F;li&gt;
&lt;li&gt;When we refresh a MV, we won’t be getting a history of all the changes that a datapoint has went through in the underlying tables or even how many times did a datapoint get updated since its last MV state. The datapoint might’ve even be deleted.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Application DB v&#x2F;s Warehouse DB</title>
        <published>2022-09-25T00:00:00+00:00</published>
        <updated>2022-09-25T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://vinay.lol/til/application-db-versus-warehouse-db/" type="text/html"/>
        <id>https://vinay.lol/til/application-db-versus-warehouse-db/</id>
        
        <content type="html">&lt;p&gt;A data engineer is often required to write pipelines so that engineers from other teams can consume daily production data for their analysis and modelling needs.&lt;&#x2F;p&gt;
&lt;p&gt;They can either try to read directly from the application DB (the DB that is connected to your main application) or create a new DB (Warehouse DB) to store transformed data which will be ready for analytics.&lt;&#x2F;p&gt;
&lt;p&gt;It is better to maintain a warehouse DB because:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Since the uptime and performance of application DB is critical for production usecases, you can keep deleting the old data. The older data can be fetched from the data lake or from the warehouse DB. &lt;&#x2F;li&gt;
&lt;li&gt;Let&#x27;s say you want to add a new (derived) column which will make things easier for you analytic purposes, it is harder to make changes to the schema of the application DB than to the warehouse DB&lt;&#x2F;li&gt;
&lt;li&gt;Application DBs are usually not designed to be performant for analytic purposes. Application DBs are never optimized for long term storage and querying.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;misc&quot;&gt;Misc:&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;Data Lake:&lt;&#x2F;strong&gt; A storage location where all of the raw and unprocessed data is dumped for a later use. Storage options like S3 are best.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Data Warehouse:&lt;&#x2F;strong&gt; A storage location used for storing processed data which is ready for immediate consumption (by product&#x2F;analytics teams).&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Explain Analyze</title>
        <published>2022-09-25T00:00:00+00:00</published>
        <updated>2022-09-25T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://vinay.lol/til/explain-analyze/" type="text/html"/>
        <id>https://vinay.lol/til/explain-analyze/</id>
        
        <content type="html">&lt;p&gt;Let&#x27;s say we have this query [1]&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;select name, artist, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;text
&lt;&#x2F;span&gt;&lt;span&gt;from card
&lt;&#x2F;span&gt;&lt;span&gt;where to_tsvector(name || &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39; &amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;|| artist || &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39; &amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;) @@ to_tsquery(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Avon&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If we want to make this run faster, we would probably think of creating a new column which helps us save some computation time (especially if the number of rows is huge)&lt;&#x2F;p&gt;
&lt;p&gt;So we create a new column like this&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;ALTER TABLE card
&lt;&#x2F;span&gt;&lt;span&gt;  ADD COLUMN document tsvector;
&lt;&#x2F;span&gt;&lt;span&gt;update card
&lt;&#x2F;span&gt;&lt;span&gt;set document = to_tsvector(name || &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39; &amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;|| artist || &lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39; &amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now you can just query the document column [2]&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;select name, artist, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;text
&lt;&#x2F;span&gt;&lt;span&gt;from card
&lt;&#x2F;span&gt;&lt;span&gt;where document @@ to_tsquery(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Avon&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, How do we knw how much improvement does [2] get us over [1]? Enter &lt;strong&gt;&lt;code&gt;explain analyze&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#151515;color:#e8e8d3;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;explain analyze select name, artist, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;text
&lt;&#x2F;span&gt;&lt;span&gt;                from card
&lt;&#x2F;span&gt;&lt;span&gt;                where document @@ to_tsquery(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Avon&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;explain analyze select name, artist, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fbfdc;&quot;&gt;text
&lt;&#x2F;span&gt;&lt;span&gt;                from card
&lt;&#x2F;span&gt;&lt;span&gt;                where document_with_idx @@ to_tsquery(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#99ad6a;&quot;&gt;Avon&lt;&#x2F;span&gt;&lt;span style=&quot;color:#556633;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You will be presented with the time it took to execute both the queries.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Reference:&lt;&#x2F;strong&gt; &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=szfUbzsKvtE&quot;&gt;Full Text Search PostgreSQL&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Recommendations</title>
        <published>2022-08-15T00:00:00+00:00</published>
        <updated>2022-10-17T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://vinay.lol/posts/recommendations/" type="text/html"/>
        <id>https://vinay.lol/posts/recommendations/</id>
        
        <content type="html">&lt;style&gt;

    .svg-icon-container{
        min-height: 1rem;
        margin: 2px 2px 0px 0px;
    }

    .alert-box-container{
        display: flex;
        border-radius: 4px;
        min-height: 1rem;
        vertical-align: center;
        padding: 0.75rem 1rem 0.75rem 0.5rem;
        border-left-style: solid;
        border-left-width: 0.25rem;
    }

    #info-id{
        background-color: #EBF8FE;
        color: #2A6CB3
    }

    #warning-id{
        background-color: #FCF4F5;
        color: #D74937
    }

&lt;&#x2F;style&gt;


&lt;div&gt;



    


&lt;div class=&quot;alert-box-container&quot; id=info-id&gt;
    &lt;div class = &quot;svg-icon-container&quot;&gt;
        
            &lt;svg fill=&quot;currentColor&quot; width=&quot;24px&quot; height=&quot;24px&quot; viewBox=&quot;0 0 24 24&quot; xmlns=&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M20 12C20 7.58172 16.4183 4 12 4C7.58172 4 4 7.58172 4 12C4 16.4183 7.58172 20 12 20C16.4183 20 20 16.4183 20 12ZM11 8C11 8.55228 11.4477 9 12 9C12.5523 9 13 8.55228 13 8C13 7.44772 12.5523 7 12 7C11.4477 7 11 7.44772 11 8ZM12 10C13 10 13 11 13 11V16C13 16 13 17 12 17C11 17 11 16 11 16V11C11 11 11 11 10.5 11C10 11 10 10 10 10H12Z&quot;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;
                
    &lt;&#x2F;div&gt;
    This post will be updated every few months
&lt;&#x2F;div&gt;

&lt;&#x2F;div&gt;&lt;h1 id=&quot;youtube&quot;&gt;Youtube&lt;&#x2F;h1&gt;
&lt;p&gt;When you find a star(*) on favorite, it means there are several more amazing videos in the channel but I just picked one.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;channels&quot;&gt;Channels&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;channel&#x2F;UCYO_jab_esuFRV4b17AJtAw&quot;&gt;3Blue1Brown&lt;&#x2F;a&gt;&lt;br &#x2F;&gt;
a. Maths, Visualisation&lt;br &#x2F;&gt;
b. favorite: &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;playlist?list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab&quot;&gt;Essecence of Linear Algebra&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;channel&#x2F;UCnpekFV93kB1O0rVqEKSumg&quot;&gt;Backstage With Millionaires&lt;&#x2F;a&gt;&lt;br &#x2F;&gt;
a. A great source of Indian startup news&lt;br &#x2F;&gt;
b. favorite: &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=MDtQ4VdGZqg&quot;&gt;Interview with Suumit Shah&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;channel&#x2F;UCcbhpngcGDw-LemvWaEaT0Q&quot;&gt;Chalchithra Talks&lt;&#x2F;a&gt;&lt;br &#x2F;&gt;
a. Book&#x2F;Movie&#x2F;Cooking&#x2F;Series recommendations by famous artists and media personalities&lt;br &#x2F;&gt;
b. favorite*: &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=JQRtq_B0BGg&quot;&gt;Rohan Joshi Episode&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;channel&#x2F;UCdC0An4ZPNr_YiFiYoVbwaw&quot;&gt;Daily Dose of Internet&lt;&#x2F;a&gt;&lt;br &#x2F;&gt;
a. Keeping up with the amusing part of the internet&lt;br &#x2F;&gt;
b. favorite*: &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=hQonMucrw-c&quot;&gt;This one&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;c&#x2F;DeltaBolic&#x2F;&quot;&gt;Delta Bolic&lt;&#x2F;a&gt;&lt;br &#x2F;&gt;
a. Fitness videos that I find accurate and helpful. Also no BS intros&lt;br &#x2F;&gt;
b. favorite: &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;c&#x2F;DeltaBolic&#x2F;videos&quot;&gt;All his YT shorts&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;c&#x2F;EngineerMan&quot;&gt;Engineering Man&lt;&#x2F;a&gt;&lt;br &#x2F;&gt;
a. Software Engineering, Programming Languages&lt;br &#x2F;&gt;
b. favorite*: &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=TJzltwv7jJs&amp;amp;list=PLlcnQQJK8SUjfkCph45fz6rC0de60LVZR&amp;amp;index=16&quot;&gt;Linux Processes&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;c&#x2F;Fireship&#x2F;&quot;&gt;Fireship&lt;&#x2F;a&gt;&lt;br &#x2F;&gt;
a. Web development, JavaScript, Latest Tools &amp;amp; Frameworks, Funny&lt;br &#x2F;&gt;
b. favorite*: &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=meTpMP0J5E8&amp;amp;list=PL0vfts4VzfNjurgyRawm_e0RevgP7g1Ao&quot;&gt;Building a DAPP to mint NFTs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;c&#x2F;HusseinNasser-software-engineering&#x2F;&quot;&gt;Hussein Nasser&lt;&#x2F;a&gt;&lt;br &#x2F;&gt;
a. Software Engineering, System Design, Computer Networks&lt;br &#x2F;&gt;
b. favorite: &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=SqqrOspasag&quot;&gt;Proxy v&#x2F;s Reverse Proxy&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;channel&#x2F;UCmMGlb7mGXYVthrXYSwlQhw&quot;&gt;Joma in NYC&lt;&#x2F;a&gt;&lt;br &#x2F;&gt;
a. Film Making, Hilarious, Youtuber Lifestyle&lt;br &#x2F;&gt;
b. favorite*: &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=WTxTBFU7Sdk&amp;amp;list=PLVmiarmAcuP1U1QCNV9FI2P8OjB8X12kr&quot;&gt;Flirting Interview Series&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;channel&#x2F;UCV0qA-eDDICsRR9rPcnG7tw&quot;&gt;Joma Tech&lt;&#x2F;a&gt;&lt;br &#x2F;&gt;
a. Tech Industry, Tech careers&lt;br &#x2F;&gt;
b. favorite: &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=-UdWguw90g4&quot;&gt;Building a trading bot&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;channel&#x2F;UCYLS9TSah19IsB8yyUpiDzg&quot;&gt;Jordindian&lt;&#x2F;a&gt;&lt;br &#x2F;&gt;
a. Sketches, Music Videos&lt;br &#x2F;&gt;
b. favorite*: &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=LqxDaxBrVZ8&quot;&gt;Holi Expectations v&#x2F;s Reality&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;user&#x2F;OkGo&quot;&gt;OK GO&lt;&#x2F;a&gt;&lt;br &#x2F;&gt;
a. Music Videos with crazy logistics. It is insane&lt;br &#x2F;&gt;
b. favorite*: &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=u1ZB_rGFyeU&quot;&gt;I won&#x27;t let you down&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;channel&#x2F;UCGeGhS_akOxBWQcSmje6B-w&quot;&gt;Tanya Khanijow&lt;&#x2F;a&gt;&lt;br &#x2F;&gt;
a. Travel Vlogs&lt;br &#x2F;&gt;
b. favorite: &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=JJnPnni_jmE&quot;&gt;Surfing in Mulki&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;channel&#x2F;UCdngmbVKX1Tgre699-XLlUA&quot;&gt;Tech With Nana&lt;&#x2F;a&gt;&lt;br &#x2F;&gt;
a. DevOps. Amazing at teaching&lt;br &#x2F;&gt;
b. favorite*: &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=X48VuDVv0do&amp;amp;t=386s&quot;&gt;Kuberenetes Zero To Hero&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;channel&#x2F;UCa5IwvpttTGGh640GxHMPTA&quot;&gt;The Real Meaning&lt;&#x2F;a&gt;&lt;br &#x2F;&gt;
a. Explaining the lyrical meaning of Telugu songs&lt;br &#x2F;&gt;
b. favorite*: &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=OFNYsGKDlWs&quot;&gt;Ghal Ghal song meaning&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;user&#x2F;1veritasium&quot;&gt;Veritasium&lt;&#x2F;a&gt;&lt;br &#x2F;&gt;
a. Science, Curiosity&lt;br &#x2F;&gt;
b. favorite: &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=vKA4w2O61Xo&quot;&gt;The most common cognitive bias&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;playlists&quot;&gt;Playlists&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=kBdfcR-8hEY&amp;amp;list=PL30C13C91CFFEFEA6&quot;&gt;Harvard Lectures: Justice&lt;&#x2F;a&gt;&lt;br &#x2F;&gt;
a. Absolute Gold mine. My introduction to many philosophical views&lt;br &#x2F;&gt;
b. favorite: &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=Qw4l1w0rkjs&amp;amp;list=PL30C13C91CFFEFEA6&amp;amp;index=3&quot;&gt;Free To Choose&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;reddit&quot;&gt;Reddit&lt;&#x2F;h1&gt;
&lt;p&gt;While these subreddits have engaging, hilarious, and thought-provoking content, be aware, that it can be addictive.
I would also recommend switching off NSFW content.&lt;&#x2F;p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;bangalore&#x2F;&quot;&gt;r&#x2F;bangalore&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;CrazyIdeas&quot;&gt;r&#x2F;CrazyIdeas&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;CrazyIdeas&quot;&gt;r&#x2F;DigitalArt&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;drawing&#x2F;&quot;&gt;r&#x2F;drawing&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;EntrepreneurRideAlong&#x2F;&quot;&gt;r&#x2F;EntrepreneurRideAlong&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;ExperiencedDevs&#x2F;&quot;&gt;r&#x2F;ExperiencedDevs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;NoStupidQuestions&#x2F;&quot;&gt;r&#x2F;NoStupidQuestions&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;streetwear&#x2F;&quot;&gt;r&#x2F;streetwear&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;Showerthoughts&#x2F;&quot;&gt;r&#x2F;Showerthoughts&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;TeluguMusicMelodies&#x2F;&quot;&gt;r&#x2F;TeluguMusicMelodies&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;TooAfraidToAsk&#x2F;&quot;&gt;r&#x2F;TooAfraidToAsk&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;twitter&quot;&gt;Twitter&lt;&#x2F;h1&gt;
&lt;p&gt;Entrepreneurship, Social experiments, Philosophy, Human behavioral insights&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;kunalb11&quot;&gt;Kunal Shah&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;naval&quot;&gt;Naval Ravikant&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;paraschopra&quot;&gt;Paras Chopra&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;paulg&quot;&gt;Paul Graham&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;MLOPs, ML System Design, Software Engineering for Machine Learning&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;chipro&quot;&gt;Chip Huyen&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;sh_reya&quot;&gt;Shreya Shankar&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Deep Learning SOTA&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;karpathy&quot;&gt;Andrej Karpathy&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Habits, Productivity&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;JamesClear&quot;&gt;James Clear&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;ShaneAParrish&quot;&gt;Shane Parrish&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;movies&quot;&gt;Movies&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;Natchathiram Nagargirathu (Netflix)&lt;&#x2F;li&gt;
&lt;li&gt;Everything Everywhere All At Once&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
</feed>
